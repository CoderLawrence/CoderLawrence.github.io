<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lawrence&#39;s Blogs</title>
  
  <subtitle>不东就西，无问西东</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://CoderLawrence.github.io/"/>
  <updated>2020-03-22T17:23:10.180Z</updated>
  <id>https://CoderLawrence.github.io/</id>
  
  <author>
    <name>CoderLawrence</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS查漏补缺之performSelector</title>
    <link href="https://CoderLawrence.github.io/2020/03/21/iOS%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA%E4%B9%8BperformSelector/"/>
    <id>https://CoderLawrence.github.io/2020/03/21/iOS查漏补缺之performSelector/</id>
    <published>2020-03-21T05:30:32.000Z</published>
    <updated>2020-03-22T17:23:10.180Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近上班空闲时间相对来说宽裕一些，加上本身也在复习功课，在学习过程中对于iOS开发中经常使用到的 performSelector 执行方法的底层做一次详细的学习，并且对一些资料进行整理放到博客中来，文中很多内容都是摘录至别人的博客。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>performSelector 系列的函数我们都不陌生，但是对于它不同的变种以及底层原理在很多时候还是容易分不清楚，所以笔者希望通过 runtime 源码以及 GUNStep 源码来一个个抽丝剥茧，把不同变种的 performSelector 理顺，并搞清楚每个方法的底层实现，如有错误，欢迎指正。</p><h3 id="NSObject-下的-performSelector"><a href="#NSObject-下的-performSelector" class="headerlink" title="NSObject 下的 performSelector"></a>NSObject 下的 performSelector</h3><h4 id="1-1-探索"><a href="#1-1-探索" class="headerlink" title="1.1 探索"></a>1.1 探索</h4><ul><li><code>performSelector:(SEL)aSelector</code></li></ul><p><code>performSelector</code> 方法是最简单的一个 <code>API</code>，使用方法如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)lz_performSelector </span><br><span class="line">&#123;</span><br><span class="line">[<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(task)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)task </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">13</span>:<span class="number">26.321254</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">61807</span>:<span class="number">828757</span>] -[ViewController task]</span><br></pre></td></tr></table></figure><p><code>performSelector:</code> 方法只需要传入一个 <code>SEL</code>，在 <code>runtime</code> 底层实现为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)performSelector:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sel) [<span class="keyword">self</span> doesNotRecognizeSelector:sel];</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">id</span>(*)(<span class="keyword">id</span>, SEL))objc_msgSend)(<span class="keyword">self</span>, sel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>performSelector:(SEL)aSelector withObject:(id)object</code></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)lz_performSelectorWithObj</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(taskWithParam:) withObject:@&#123;<span class="string">@"param"</span>: <span class="string">@"Lawrence"</span>&#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)taskWithParam:(<span class="built_in">NSDictionary</span> *)param</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, param);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">12</span>:<span class="number">34.473153</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">61790</span>:<span class="number">827408</span>] -[ViewController taskWithParam:]</span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">12</span>:<span class="number">34.473381</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">61790</span>:<span class="number">827408</span>] &#123;</span><br><span class="line">    param = Lawrence;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>performSelector:withObject:</code> 方法底层实现如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)performSelector:(SEL)sel withObject:(<span class="keyword">id</span>)obj &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sel) [<span class="keyword">self</span> doesNotRecognizeSelector:sel];</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">id</span>(*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))objc_msgSend)(<span class="keyword">self</span>, sel, obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2</code></li></ul><p>这个方法相比上一个方法又多了一个参数：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)jh_performSelectorWithObj1AndObj2</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(taskWithParam1:param2:) withObject:@&#123;<span class="string">@"param1"</span>: <span class="string">@"lee"</span>&#125; withObject:@&#123;<span class="string">@"param2"</span>: <span class="string">@"Lawrence"</span>&#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)taskWithParam1:(<span class="built_in">NSDictionary</span> *)param1 param2:(<span class="built_in">NSDictionary</span> *)param2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, param1);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, param2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">17</span>:<span class="number">52.889731</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">61859</span>:<span class="number">833076</span>] -[ViewController taskWithParam1:param2:]</span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">17</span>:<span class="number">52.889921</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">61859</span>:<span class="number">833076</span>] &#123;</span><br><span class="line">    param1 = lee;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">17</span>:<span class="number">52.890009</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">61859</span>:<span class="number">833076</span>] &#123;</span><br><span class="line">    param2 = Lawrence;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>performSelector:withObject:withObject:</code> 方法底层实现如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)performSelector:(SEL)sel withObject:(<span class="keyword">id</span>)obj1 withObject:(<span class="keyword">id</span>)obj2 &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sel) [<span class="keyword">self</span> doesNotRecognizeSelector:sel];</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">id</span>(*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>, <span class="keyword">id</span>))objc_msgSend)(<span class="keyword">self</span>, sel, obj1, obj2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-小结"><a href="#1-2-小结" class="headerlink" title="1.2 小结"></a>1.2 小结</h4><table><thead><tr><th>方法</th><th>底层实现</th></tr></thead><tbody><tr><td>performSelector:</td><td>((id(*)(id, SEL))objc_msgSend)(self, sel)</td></tr><tr><td>performSelector:withObject:</td><td>((id(*)(id, SEL, id))objc_msgSend)(self, sel, obj)</td></tr><tr><td>performSelector:withObject:withObject:</td><td>((id(*)(id, SEL, id, id))objc_msgSend)(self, sel, obj1, obj2)</td></tr></tbody></table><p>这三个方法应该是使用频率很高的 <code>performSelector</code> 系列方法了，我们只需要记住这三个方法在底层都是执行的<strong><em>消息发送</em></strong>即可。</p><h3 id="RunLoop-相关的-PerformSelector"><a href="#RunLoop-相关的-PerformSelector" class="headerlink" title="RunLoop 相关的 PerformSelector"></a>RunLoop 相关的 PerformSelector</h3><p><img src="/2020/03/21/iOS查漏补缺之performSelector/performSelector_1.png" alt="Alt Text"></p><p>如上图所示，在NSRunLoop 头文件中，定义了的两个分类，分别是</p><ul><li><code>NSDelayedPerforming</code> 对应于 <code>NSObject</code></li><li><code>NSOrderedPerform</code> 对应于 <code>NSRunLoop</code></li></ul><h4 id="2-1-NSObject-分类-NSDelayedPerforming"><a href="#2-1-NSObject-分类-NSDelayedPerforming" class="headerlink" title="2.1  NSObject 分类 NSDelayedPerforming"></a>2.1  NSObject 分类 NSDelayedPerforming</h4><h5 id="2-1-1-探索"><a href="#2-1-1-探索" class="headerlink" title="2.1.1 探索"></a>2.1.1 探索</h5><ul><li><code>performSelector:WithObject:afterDelay:</code></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)lz_performSelectorwithObjectafterDelay</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(taskWithParam:) withObject:@&#123;<span class="string">@"param"</span>: <span class="string">@"Lawrence"</span>&#125; afterDelay:<span class="number">1.</span>f];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)taskWithParam:(<span class="built_in">NSDictionary</span> *)param</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, param);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">25</span>:<span class="number">01.475634</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">61898</span>:<span class="number">838345</span>] -[ViewController taskWithParam:]</span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">25</span>:<span class="number">01.475837</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">61898</span>:<span class="number">838345</span>] &#123;</span><br><span class="line">    param = Lawrence;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>苹果官方注释文档如下：</p><p>This method sets up a timer to perform the aSelector message on the current thread’s run loop. The timer is configured to run in the default mode (NSDefaultRunLoopMode). When the timer fires, the thread attempts to dequeue the message from the run loop and perform the selector. It succeeds if the run loop is running and in the default mode; otherwise, the timer waits until the run loop is in the default mode.</p><p>这个方法会在当前线程所对应的 runloop 中设置一个定时器来执行传入的 SEL。定时器需要在 NSDefaultRunLoopMode 模式下才会被触发。当定时器启动后，线程会尝试从 runloop 中取出 SEL 然后执行。<br>如果 runloop 已经启动并且处于 NSDefaultRunLoopMode 的话，SEL 执行成功。否则，直到 runloop 处于 NSDefaultRunLoopMode 前，timer 都会一直等待</p><p>通过断点调试如下图所示，runloop 底层最终通过 <code>__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ ()</code> 来触发任务执行的。</p><p><img src="/2020/03/21/iOS查漏补缺之performSelector/performSelector_2.jpg" alt="Alt Text"></p><p>因为<code>NSRunLoop</code> 并没有开源，所以我们只能通过 <code>GNUStep</code> 来窥探底层实现细节，如下所示：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) performSelector: (SEL)aSelector</span><br><span class="line">      withObject: (<span class="keyword">id</span>)argument</span><br><span class="line">      afterDelay: (<span class="built_in">NSTimeInterval</span>)seconds</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">NSRunLoop</span>*loop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line">  GSTimedPerformer*item;</span><br><span class="line"></span><br><span class="line">  item = [[GSTimedPerformer alloc] initWithSelector: aSelector</span><br><span class="line">     target: <span class="keyword">self</span></span><br><span class="line">   argument: argument</span><br><span class="line">      delay: seconds];</span><br><span class="line">  [[loop _timedPerformers] addObject: item];</span><br><span class="line">  RELEASE(item);</span><br><span class="line">  [loop addTimer: item-&gt;timer forMode: <span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The GSTimedPerformer class is used to hold information about</span></span><br><span class="line"><span class="comment"> * messages which are due to be sent to objects at a particular time.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GSTimedPerformer</span>: <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">@public</span></span><br><span class="line">  SELselector;</span><br><span class="line">  <span class="keyword">id</span>target;</span><br><span class="line">  <span class="keyword">id</span>argument;</span><br><span class="line">  <span class="built_in">NSTimer</span>*timer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) fire;</span><br><span class="line">- (<span class="keyword">id</span>) initWithSelector: (SEL)aSelector</span><br><span class="line"> target: (<span class="keyword">id</span>)target</span><br><span class="line">       argument: (<span class="keyword">id</span>)argument</span><br><span class="line">  delay: (<span class="built_in">NSTimeInterval</span>)delay;</span><br><span class="line">- (<span class="keyword">void</span>) invalidate;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>我们可以看到，在 <code>performSelector:WithObject:afterDelay:</code> 底层</p><ul><li>获取当前线程的 <code>NSRunLoop</code> 对象。</li><li>通过传入的 <code>SEL</code> 、<code>argument</code> 和 <code>delay</code> 初始化一个<br><code>GSTimedPerformer</code> 实例对象，<code>GSTimedPerformer</code> 类型里面封装了 <code>NSTimer</code>对象。</li><li>然后把 <code>GSTimedPerformer</code> 实例加入到 <code>RunLoop</code> 对象的 <code>_timedPerformers</code> 成员变量中</li><li>释放掉 <code>GSTimedPerformer</code> 对象</li><li>以 <code>default mode</code> 将 <code>timer</code> 对象加入到 <code>runloop</code> 中</li></ul><hr><ul><li><code>performSelector:WithObject:afterDelay:inModes</code></li></ul><p><code>performSelector:WithObject:afterDelay:inModes</code> 方法相比上个方法多了一个 <code>modes</code> 参数，根据官方文档的定义，根据官方文档的定义，只有当 <code>runloop</code> 处于  <code>modes</code> 中的任意一个 <code>mode</code> 时，才会执行任务，如果 <code>modes</code> 为空，那么将不会执行任务。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)jh_performSelectorwithObjectafterDelayInModes</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(taskWithParam:) withObject:@&#123;<span class="string">@"param"</span>: <span class="string">@"Lawrence"</span>&#125; afterDelay:<span class="number">1.</span>f inModes:@[<span class="built_in">NSRunLoopCommonModes</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)taskWithParam:(<span class="built_in">NSDictionary</span> *)param</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, param);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印如下</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58.479152</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">62006</span>:<span class="number">851520</span>] -[ViewController taskWithParam:]</span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">38</span>:<span class="number">58.479350</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">62006</span>:<span class="number">851520</span>] &#123;</span><br><span class="line">    param = Lawrence;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>这里我们如果把 <code>modes</code> 参数改为 <code>UITrackingRunLoopMode</code>，那么就只有在 <code>scrollView</code> 发生滚动的时候才会触发 <code>timer</code></p><p>我们再看一下 <code>GNUStep</code> 对应的实现：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) performSelector: (SEL)aSelector</span><br><span class="line">      withObject: (<span class="keyword">id</span>)argument</span><br><span class="line">      afterDelay: (<span class="built_in">NSTimeInterval</span>)seconds</span><br><span class="line"> inModes: (<span class="built_in">NSArray</span>*)modes</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">unsigned</span>count = [modes count];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">NSRunLoop</span>*loop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line">      <span class="built_in">NSString</span>*marray[count];</span><br><span class="line">      GSTimedPerformer*item;</span><br><span class="line">      <span class="keyword">unsigned</span>i;</span><br><span class="line"></span><br><span class="line">      item = [[GSTimedPerformer alloc] initWithSelector: aSelector</span><br><span class="line"> target: <span class="keyword">self</span></span><br><span class="line">       argument: argument</span><br><span class="line">  delay: seconds];</span><br><span class="line">      [[loop _timedPerformers] addObject: item];</span><br><span class="line">      RELEASE(item);</span><br><span class="line">      <span class="keyword">if</span> ([modes isProxy])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      marray[i] = [modes objectAtIndex: i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">          [modes getObjects: marray];</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">&#123;</span><br><span class="line">  [loop addTimer: item-&gt;timer forMode: marray[i]];</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>可以看到，相比于上一个方法的底层实现不同的是，这里会往循环添加不同 <code>mode</code> 的 <code>timer</code> 对象到 <code>runloop</code> 中。</p><hr><ul><li><code>cancelPreviousPerformRequestsWithTarget:</code></li><li><code>cancelPreviousPerformRequestsWithTarget:selector:object:</code></li></ul><p><code>cancelPreviousPerformRequestsWithTarget:</code>方法和 <code>cancelPreviousPerformRequestsWithTarget:selector:object:</code>方法是两个类方法，它们的作用是取消执行之前通过 <code>performSelector:WithObject:afterDelay:</code>方法注册的任务。使用起来如下所示:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)lz_performSelectorwithObjectafterDelayInModes</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 只有当 scrollView 发生滚动时，才会触发timer</span></span><br><span class="line"><span class="comment">//    [self performSelector:@selector(taskWithParam:) withObject:@&#123;@"param": @"Lawrence"&#125; afterDelay:1.f inModes:@[UITrackingRunLoopMode]];</span></span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(taskWithParam:) withObject:@&#123;<span class="string">@"param"</span>: <span class="string">@"leejunhui"</span>&#125; afterDelay:<span class="number">5.</span>f inModes:@[<span class="built_in">NSRunLoopCommonModes</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)cancelTask &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">    [ViewController cancelPreviousPerformRequestsWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(taskWithParam:) object:@&#123;<span class="string">@"param"</span>: <span class="string">@"Lawrence"</span>&#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [ViewController cancelPreviousPerformRequestsWithTarget:self];</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">52</span>:<span class="number">33.549213</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">62172</span>:<span class="number">865289</span>] -[ViewController cancelTask]</span><br></pre></td></tr></table></figure><p>这里有一个区别，就是 <code>cancelPreviousPerformRequestsWithTarget:</code> 类方法会取消掉 <code>target</code> 上所有的通过 <code>performSelector:WithObject:afterDelay:</code>实例方法注册的定时任务，而 <code>cancelPreviousPerformRequestsWithTarget:selector:object:</code> 只会通过传入的 SEL 取消匹配到的定时任务</p><p>在 <code>GNUStep</code> 中 <code>cancelPreviousPerformRequestsWithTarget:</code>方法底层实现如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Cancels any perform operations set up for the specified target</span></span><br><span class="line"><span class="comment"> * in the current run loop.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>) cancelPreviousPerformRequestsWithTarget: (<span class="keyword">id</span>)target</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span>*perf = [[<span class="built_in">NSRunLoop</span> currentRunLoop] _timedPerformers];</span><br><span class="line">    <span class="keyword">unsigned</span>count = [perf count];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        GSTimedPerformer*array[count];</span><br><span class="line">        </span><br><span class="line">        IF_NO_GC(RETAIN(target));</span><br><span class="line">        [perf getObjects: array];</span><br><span class="line">        <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            GSTimedPerformer*p = array[count];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (p-&gt;target == target)</span><br><span class="line">            &#123;</span><br><span class="line">                [p invalidate];</span><br><span class="line">                [perf removeObjectAtIndex: count];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RELEASE(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GSTimedPerformer 实例方法</span></span><br><span class="line">- (<span class="keyword">void</span>) invalidate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer != <span class="literal">nil</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        [timer invalidate];</span><br><span class="line">        DESTROY(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑其实很清晰：</p><ul><li>取出当前 <code>runloop</code> 对象的成员变量 <code>_timedPerformers</code></li><li>判断定时任务数组是否为空，不为空才会继续往下走</li><li>初始化一个局部的空的任务数组，然后通过 getObjects 从成员量中取出任务</li><li>通过<code>while</code>循环遍历所有的任务，如果匹配到了对应的<code>target</code>，则调用任务的 <code>invalidate</code> 方法，在这个方法内部会把定时器停掉然后销毁。接着还需要把成员变量 <code>_timedPerformers</code> 中对应的任务移除掉</li></ul><p>另一个取消任务的方法底层实现如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Cancels any perform operations set up for the specified target</span></span><br><span class="line"><span class="comment"> * in the current loop, but only if the value of aSelector and argument</span></span><br><span class="line"><span class="comment"> * with which the performs were set up match those supplied.&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * Matching of the argument may be either by pointer equality or by</span></span><br><span class="line"><span class="comment"> * use of the [NSObject-isEqual:] method.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>) cancelPreviousPerformRequestsWithTarget: (<span class="keyword">id</span>)target</span><br><span class="line">                                        selector: (SEL)aSelector</span><br><span class="line">                                          object: (<span class="keyword">id</span>)arg</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span>*perf = [[<span class="built_in">NSRunLoop</span> currentRunLoop] _timedPerformers];</span><br><span class="line">    <span class="keyword">unsigned</span>count = [perf count];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        GSTimedPerformer*array[count];</span><br><span class="line">        </span><br><span class="line">        IF_NO_GC(RETAIN(target));</span><br><span class="line">        IF_NO_GC(RETAIN(arg));</span><br><span class="line">        [perf getObjects: array];</span><br><span class="line">        <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            GSTimedPerformer*p = array[count];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (p-&gt;target == target &amp;&amp; sel_isEqual(p-&gt;selector, aSelector)</span><br><span class="line">                &amp;&amp; (p-&gt;argument == arg || [p-&gt;argument isEqual: arg]))</span><br><span class="line">            &#123;</span><br><span class="line">                [p invalidate];</span><br><span class="line">                [perf removeObjectAtIndex: count];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RELEASE(arg);</span><br><span class="line">        RELEASE(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的实现不一样的地方就是除了判断 <code>target</code> 是否匹配外，还会判断 <code>SEL</code> 是否匹配，以及参数是否匹配。</p><hr><h5 id="2-1-2-小结"><a href="#2-1-2-小结" class="headerlink" title="2.1.2 小结"></a>2.1.2 小结</h5><ul><li><code>performSelector:WithObject:afterDelay:</code><ul><li>在该方法所在线程的 <code>runloop</code> 处于 <code>default mode</code> 时，根据给定的时间触发给定的任务。底层原理是把一个<code>timer</code> 对象以 <code>default mode</code> 加入到 <code>runloop</code> 对象中，等待唤醒。</li></ul></li><li><code>performSelector:WithObject:afterDelay:inModes:</code><ul><li>在该方法所在线程的 <code>runloop</code> 处于给定的任一 <code>mode</code> 时，根据给定的时间触发给定的任务。底层原理是循环把一个 <code>timer</code> 对象以给定的 <code>mode</code> 加入到 <code>runloop</code> 对象中，等待唤醒。</li></ul></li><li><code>cancelPreviousPerformRequestsWithTarget:</code><ul><li>取消 <code>target</code> 对象通过 <code>performSelector:WithObject:afterDelay:</code> 方法或 <code>performSelector:WithObject:afterDelay:inModes:</code> 方法注册的所有定时任务</li></ul></li><li><code>cancelPreviousPerformRequestsWithTarget:selector:object:</code><ul><li>取消 <code>target</code> 对象通过 <code>performSelector:WithObject:afterDelay:</code>  方法或 <code>performSelector:WithObject:afterDelay:inModes:</code> 方法注册的指定的定时任务</li></ul></li></ul><p>这四个方法是作为 <code>NSObject</code> 的 <code>NSDelayedPerforming</code> 分类存在于 <code>NSRunLoop</code> 源代码中，所以我们在使用的时候要注意一个细节，那就是执行这些方法的线程是否是主线程，<strong>如果是主线程，那么执行起来是没有问题的，但是，如果是在子线程中执行这些方法，则需要开启子线程对应的 <code>runloop</code> 才能保证执行成功。</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)lz_performSelectorwithObjectafterDelay</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">        [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(taskWithParam:) withObject:@&#123;<span class="string">@"param"</span>: <span class="string">@"Lawrence"</span>&#125; afterDelay:<span class="number">1.</span>f];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    [self performSelector:@selector(taskWithParam:) withObject:@&#123;@"param": @"leejunhui"&#125; afterDelay:1.f];</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">- (<span class="keyword">void</span>)taskWithParam:(<span class="built_in">NSDictionary</span> *)param</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, param);</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有输出</span></span><br></pre></td></tr></table></figure><p>如上所示的代码，通过 <code>GCD</code> 的异步执行函数在全局并发队列上执行任务，并没有任何打印输出，我们加入 <code>runloop</code> 的启动代码后结果将完全不一样：</p><p><img src="/2020/03/21/iOS查漏补缺之performSelector/performSelector_3.png" alt="Alt Text"></p><p>对于 <code>performSelector:WithObject:afterDelay:inModes</code> 方法，如果遇到这样的情况，也是一样的解决方案。</p><h4 id="2-2-NSRunLoop-的分类-NSOrderedPerform"><a href="#2-2-NSRunLoop-的分类-NSOrderedPerform" class="headerlink" title="2.2 NSRunLoop 的分类 NSOrderedPerform"></a>2.2 NSRunLoop 的分类 NSOrderedPerform</h4><h5 id="2-2-1-探索"><a href="#2-2-1-探索" class="headerlink" title="2.2.1 探索"></a>2.2.1 探索</h5><ul><li><code>performSelector:target:argument:order:modes:</code></li></ul><p><code>performSelector:target:argument:order:modes:</code> 方法的调用者是 <code>NSRunLoop</code>实例，然后需要传入要执行的 <code>SEL</code>，以及 <code>SEL</code> 对应的 <code>target</code>，和 <code>SEL</code> 要接收的参数 <code>argument</code>，最后是此次任务的优先级 order，以及一个 运行模式集合 <code>modes</code>，目的是当 <code>runloop</code> 的 <code>currentMode</code> 处于这个运行模式集合中的其中任意一个<code>mode</code> 时，就会按照优先级 <code>order</code> 来触发<code>SEL</code>的执行。具体使用如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="keyword">void</span>)lz_performSelectorTargetArgumentOrderModes</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSRunLoop</span> *runloop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line">    [runloop performSelector:<span class="keyword">@selector</span>(runloopTask5) target:<span class="keyword">self</span> argument:<span class="literal">nil</span> order:<span class="number">5</span> modes:@[<span class="built_in">NSRunLoopCommonModes</span>]];</span><br><span class="line">    [runloop performSelector:<span class="keyword">@selector</span>(runloopTask1) target:<span class="keyword">self</span> argument:<span class="literal">nil</span> order:<span class="number">1</span> modes:@[<span class="built_in">NSRunLoopCommonModes</span>]];</span><br><span class="line">    [runloop performSelector:<span class="keyword">@selector</span>(runloopTask3) target:<span class="keyword">self</span> argument:<span class="literal">nil</span> order:<span class="number">3</span> modes:@[<span class="built_in">NSRunLoopCommonModes</span>]];</span><br><span class="line">    [runloop performSelector:<span class="keyword">@selector</span>(runloopTask2) target:<span class="keyword">self</span> argument:<span class="literal">nil</span> order:<span class="number">2</span> modes:@[<span class="built_in">NSRunLoopCommonModes</span>]];</span><br><span class="line">    [runloop performSelector:<span class="keyword">@selector</span>(runloopTask4) target:<span class="keyword">self</span> argument:<span class="literal">nil</span> order:<span class="number">4</span> modes:@[<span class="built_in">NSRunLoopCommonModes</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)runloopTask1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"runloop 任务1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)runloopTask2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"runloop 任务2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)runloopTask3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"runloop 任务3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)runloopTask4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"runloop 任务4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)runloopTask5</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"runloop 任务5"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">14</span>:<span class="number">23</span>:<span class="number">27.088636</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">62976</span>:<span class="number">972980</span>] runloop 任务<span class="number">1</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">14</span>:<span class="number">23</span>:<span class="number">27.088760</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">62976</span>:<span class="number">972980</span>] runloop 任务<span class="number">2</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">14</span>:<span class="number">23</span>:<span class="number">27.088868</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">62976</span>:<span class="number">972980</span>] runloop 任务<span class="number">3</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">14</span>:<span class="number">23</span>:<span class="number">27.088964</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">62976</span>:<span class="number">972980</span>] runloop 任务<span class="number">4</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">14</span>:<span class="number">23</span>:<span class="number">27.089048</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">62976</span>:<span class="number">972980</span>] runloop 任务<span class="number">5</span></span><br></pre></td></tr></table></figure><p>可以看到输出结果就是按照我们传入的 <code>order</code> 参数作为任务执行的顺序。</p><p><code>GUNStep</code> 中这个底层的底层实现如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) performSelector: (SEL)aSelector</span><br><span class="line">                  target: (<span class="keyword">id</span>)target</span><br><span class="line">                argument: (<span class="keyword">id</span>)argument</span><br><span class="line">                   order: (<span class="built_in">NSUInteger</span>)order</span><br><span class="line">                   modes: (<span class="built_in">NSArray</span>*)modes</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span>count = [modes count];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSString</span>*array[count];</span><br><span class="line">        GSRunLoopPerformer*item;</span><br><span class="line">        </span><br><span class="line">        item = [[GSRunLoopPerformer alloc] initWithSelector: aSelector</span><br><span class="line">                                                     target: target</span><br><span class="line">                                                   argument: argument</span><br><span class="line">                                                      order: order];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([modes isProxy])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">unsigned</span>i;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                array[i] = [modes objectAtIndex: i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            [modes getObjects: array];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">NSString</span>*mode = array[count];</span><br><span class="line">            <span class="keyword">unsigned</span>end;</span><br><span class="line">            <span class="keyword">unsigned</span>i;</span><br><span class="line">            GSRunLoopCtxt*context;</span><br><span class="line">            GSIArrayperformers;</span><br><span class="line">            </span><br><span class="line">            context = <span class="built_in">NSMapGet</span>(_contextMap, mode);</span><br><span class="line">            <span class="keyword">if</span> (context == <span class="literal">nil</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                context = [[GSRunLoopCtxt alloc] initWithMode: mode</span><br><span class="line">                                                        extra: _extra];</span><br><span class="line">                <span class="built_in">NSMapInsert</span>(_contextMap, context-&gt;mode, context);</span><br><span class="line">                RELEASE(context);</span><br><span class="line">            &#125;</span><br><span class="line">            performers = context-&gt;performers;</span><br><span class="line">            </span><br><span class="line">            end = GSIArrayCount(performers);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; end; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                GSRunLoopPerformer*p;</span><br><span class="line">                </span><br><span class="line">                p = GSIArrayItemAtIndex(performers, i).obj;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;order &gt; order)</span><br><span class="line">                &#123;</span><br><span class="line">                    GSIArrayInsertItem(performers, (GSIArrayItem)((<span class="keyword">id</span>)item), i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == end)</span><br><span class="line">            &#123;</span><br><span class="line">                GSIArrayInsertItem(performers, (GSIArrayItem)((<span class="keyword">id</span>)item), i);</span><br><span class="line">            &#125;</span><br><span class="line">            i = GSIArrayCount(performers);</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span> &amp;&amp; i &gt; context-&gt;maxPerformers)</span><br><span class="line">            &#123;</span><br><span class="line">                context-&gt;maxPerformers = i;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"WARNING ... there are %u performers scheduled"</span></span><br><span class="line">                      <span class="string">@" in mode %@ of %@\n(Latest: [%@ %@])"</span>,</span><br><span class="line">                      i, mode, <span class="keyword">self</span>, <span class="built_in">NSStringFromClass</span>([target <span class="keyword">class</span>]),</span><br><span class="line">                      <span class="built_in">NSStringFromSelector</span>(aSelector));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RELEASE(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GSRunLoopPerformer</span>: <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">@public</span></span><br><span class="line">    SELselector;</span><br><span class="line">    <span class="keyword">id</span>target;</span><br><span class="line">    <span class="keyword">id</span>argument;</span><br><span class="line">    <span class="keyword">unsigned</span>order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们已经知道了 <code>performSelector:WithObject:afterDelay:</code>方法底层实现使用一个包裹 <code>timer</code> 对象的数据结构的方式，而这里是使用了一个包裹了 <code>selector</code>、<code>target</code>、<code>argument</code> 以及优先级 <code>order</code>的数据结构的方式来实现。同时在 <code>context</code> 上下文的成员变量 <code>performers</code> 中存储了要执行的任务队列，所以这里实际上就是一个简单的插入排序的过程。</p><hr><ul><li><code>cancelPerformSelector:target:argument:</code></li><li><code>cancelPerformSelectorsWithTarget:</code></li></ul><p><code>cancelPerformSelector:target:argument:</code>和 <code>cancelPerformSelectorsWithTarget:</code>使用起来比较简单，一个需要传入 <code>selector</code>、<code>target</code> 和 <code>argument</code>，另一个只需要传入 <code>target</code>。它们的作用分别是根据给定的三个参数或 <code>target</code> 去 <code>runloop</code> 底层的 <code>performers</code> 任务队列中查找任务，找到了就从队列中移除掉。</p><p>而底层具体实现具体如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cancels any perform operations set up for the specified target</span></span><br><span class="line"><span class="comment"> * in the receiver.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) cancelPerformSelectorsWithTarget: (<span class="keyword">id</span>) target</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMapEnumerator</span>enumerator;</span><br><span class="line">    GSRunLoopCtxt*context;</span><br><span class="line">    <span class="keyword">void</span>*mode;</span><br><span class="line">    </span><br><span class="line">    enumerator = <span class="built_in">NSEnumerateMapTable</span>(_contextMap);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">NSNextMapEnumeratorPair</span>(&amp;enumerator, &amp;mode, (<span class="keyword">void</span>**)&amp;context))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (context != <span class="literal">nil</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            GSIArrayperformers = context-&gt;performers;</span><br><span class="line">            <span class="keyword">unsigned</span>count = GSIArrayCount(performers);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (count--)</span><br><span class="line">            &#123;</span><br><span class="line">                GSRunLoopPerformer*p;</span><br><span class="line">                </span><br><span class="line">                p = GSIArrayItemAtIndex(performers, count).obj;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;target == target)</span><br><span class="line">                &#123;</span><br><span class="line">                    GSIArrayRemoveItemAtIndex(performers, count);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSEndMapTableEnumeration</span>(&amp;enumerator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cancels any perform operations set up for the specified target</span></span><br><span class="line"><span class="comment"> * in the receiver, but only if the value of aSelector and argument</span></span><br><span class="line"><span class="comment"> * with which the performs were set up match those supplied.&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * Matching of the argument may be either by pointer equality or by</span></span><br><span class="line"><span class="comment"> * use of the [NSObject-isEqual:] method.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) cancelPerformSelector: (SEL)aSelector</span><br><span class="line">                        target: (<span class="keyword">id</span>) target</span><br><span class="line">                      argument: (<span class="keyword">id</span>) argument</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMapEnumerator</span>enumerator;</span><br><span class="line">    GSRunLoopCtxt*context;</span><br><span class="line">    <span class="keyword">void</span>*mode;</span><br><span class="line">    </span><br><span class="line">    enumerator = <span class="built_in">NSEnumerateMapTable</span>(_contextMap);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">NSNextMapEnumeratorPair</span>(&amp;enumerator, &amp;mode, (<span class="keyword">void</span>**)&amp;context))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (context != <span class="literal">nil</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            GSIArrayperformers = context-&gt;performers;</span><br><span class="line">            <span class="keyword">unsigned</span>count = GSIArrayCount(performers);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (count--)</span><br><span class="line">            &#123;</span><br><span class="line">                GSRunLoopPerformer*p;</span><br><span class="line">                </span><br><span class="line">                p = GSIArrayItemAtIndex(performers, count).obj;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;target == target &amp;&amp; sel_isEqual(p-&gt;selector, aSelector)</span><br><span class="line">                    &amp;&amp; (p-&gt;argument == argument || [p-&gt;argument isEqual: argument]))</span><br><span class="line">                &#123;</span><br><span class="line">                    GSIArrayRemoveItemAtIndex(performers, count);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSEndMapTableEnumeration</span>(&amp;enumerator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-2-小结"><a href="#2-2-2-小结" class="headerlink" title="2.2.2 小结"></a>2.2.2 小结</h5><ul><li>performSelector:target:argument:order:modes:<ul><li>在该方法所在线程的 runloop 处于给定的任一 mode 时，且处于下一次 runloop 消息循环的开头的时候触发给定的任务。底层原理是循环把一个类似于 timer 的对象加入到 runloop 的上下文的任务队列中，等待唤醒</li></ul></li><li>cancelPerformSelector:target:argument:<ul><li>取消 target 对象通过 performSelector:target:argument:order:modes: 方法方法注册的指定的任务</li></ul></li><li>cancelPerformSelectorsWithTarget:<ul><li>取消 target 对象通过 performSelector:target:argument:order:modes: 方法方法注册的所有任务</li></ul></li></ul><p>这里同样的也需要注意，<strong>如果是在子线程中执行这些方法，则需要开启子线程对应的 runloop 才能保证执行成功。</strong></p><h3 id="Thread-相关的-performSelector"><a href="#Thread-相关的-performSelector" class="headerlink" title="Thread 相关的 performSelector"></a>Thread 相关的 performSelector</h3><p><img src="/2020/03/21/iOS查漏补缺之performSelector/performSelector_4.png" alt="Alt Text"></p><p>如上图所示，在 <code>NSThread</code> 中定义了 <code>NSObject</code> 的分类 <code>NSThreadPerformAdditions</code>，其中定义了 5 个 <code>performSelector</code> 的方法。</p><h4 id="3-1-探索"><a href="#3-1-探索" class="headerlink" title="3.1 探索"></a>3.1 探索</h4><ul><li><code>performSelector:onThread:withObject:waitUntilDone:</code></li><li><code>performSelector:onThread:withObject:waitUntilDone:modes:</code></li></ul><p>根据官方文档的解释，第一个方法相当于调用了第二个方法，然后 <code>mode</code> 传入的是 <code>kCFRunLoopCommonModes</code>。我们这里只研究第一个方法。</p><p>这个方法需要相比于 <code>performSeletor:withObject:</code>多了两个参数，分别是要哪个线程执行任务以及是否阻塞当前线程。但是使用这个方法一定要小心，如下图所示是一个常见的错误用法：</p><p><img src="/2020/03/21/iOS查漏补缺之performSelector/performSelector_5.png" alt="Alt Text"></p><p>这里报的错是 <code>target thread exited while waiting for the perform</code>，就是说已经退出的线程无法执行定时任务。<br>熟悉 <code>iOS</code> 多线程的同学都知道 <code>NSThread</code> 实例化之后的线程对象在 <code>start</code> 之后就会被系统回收，而之后调用的 <code>performSelector:onThread:withObject:waitUntilDone:</code> 方法又在一个已经回收的线程上执行任务，显然就会崩溃。这里的解决方案就是给这个子线程对应的 <code>runloop</code> 启动起来，让线程具有 『有事来就干活，没事干就睡觉』 的功能，具体代码如下:</p><p><img src="/2020/03/21/iOS查漏补缺之performSelector/performSelector_6.png" alt="Alt Text"></p><p>对于 <code>waitUntilDone</code> 参数，如果我们设置为 <code>YES</code>:</p><p><img src="/2020/03/21/iOS查漏补缺之performSelector/performSelector_7.png" alt="Alt Text"></p><p>如果设置为 <code>NO</code>:</p><p><img src="/2020/03/21/iOS查漏补缺之performSelector/performSelector_8.png" alt="Alt Text"></p><p>所以这里的 <code>waitUntilDone</code> 可以简单的理解为控制同步或异步执行。</p><p>在探索 <code>GNUStep</code> 对应实现之前，我们先熟悉一下 <code>GSRunLoopThreadInfo</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Used to handle events performed in one thread from another.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span>      <span class="title">GSRunLoopThreadInfo</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">@public</span></span><br><span class="line">  <span class="built_in">NSRunLoop</span>             *loop;</span><br><span class="line">  <span class="built_in">NSLock</span>                *lock;</span><br><span class="line">  <span class="built_in">NSMutableArray</span>        *performers;</span><br><span class="line"><span class="meta">#ifdef _WIN32</span></span><br><span class="line">  HANDLE        event;</span><br><span class="line"><span class="meta">#else</span></span><br><span class="line">  <span class="keyword">int</span>                   inputFd;</span><br><span class="line">  <span class="keyword">int</span>                   outputFd;</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GSRunLoopThreadInfo</code> 是每个线程特有的一个属性，存储了线程和 <code>runloop</code> 之间的一些信息，可以通过下面的方式获取:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GSRunLoopThreadInfo *</span><br><span class="line">GSRunLoopInfoForThread(<span class="built_in">NSThread</span> *aThread)</span><br><span class="line">&#123;</span><br><span class="line">    GSRunLoopThreadInfo   *info;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (aThread == <span class="literal">nil</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        aThread = GSCurrentThread();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (aThread-&gt;_runLoopInfo == <span class="literal">nil</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        [gnustep_global_lock lock];</span><br><span class="line">        <span class="keyword">if</span> (aThread-&gt;_runLoopInfo == <span class="literal">nil</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            aThread-&gt;_runLoopInfo = [GSRunLoopThreadInfo new];</span><br><span class="line">        &#125;</span><br><span class="line">        [gnustep_global_lock unlock];</span><br><span class="line">    &#125;</span><br><span class="line">    info = aThread-&gt;_runLoopInfo;</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是另一个 <code>GSPerformHolder</code>:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class performs a dual function ...</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *   As a class, it is responsible for handling incoming events from</span></span><br><span class="line"><span class="comment"> *   the main runloop on a special inputFd.  This consumes any bytes</span></span><br><span class="line"><span class="comment"> *   written to wake the main runloop.&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> *   During initialisation, the default runloop is set up to watch</span></span><br><span class="line"><span class="comment"> *   for data arriving on inputFd.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *   As instances, each  instance retains perform receiver and argument</span></span><br><span class="line"><span class="comment"> *   values as long as they are needed, and handles locking to support</span></span><br><span class="line"><span class="comment"> *   methods which want to block until an action has been performed.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *   The initialize method of this class is called before any new threads</span></span><br><span class="line"><span class="comment"> *   run.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GSPerformHolder</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">id</span>receiver;</span><br><span class="line">    <span class="keyword">id</span>argument;</span><br><span class="line">    SELselector;</span><br><span class="line">    <span class="built_in">NSConditionLock</span>*lock;<span class="comment">// Not retained.</span></span><br><span class="line">    <span class="built_in">NSArray</span>*modes;</span><br><span class="line">    <span class="built_in">BOOL</span>                  invalidated;</span><br><span class="line"><span class="keyword">@public</span></span><br><span class="line">    <span class="built_in">NSException</span>           *exception;</span><br><span class="line">&#125;</span><br><span class="line">+ (GSPerformHolder*) newForReceiver: (<span class="keyword">id</span>)r</span><br><span class="line">                           argument: (<span class="keyword">id</span>)a</span><br><span class="line">                           selector: (SEL)s</span><br><span class="line">                              modes: (<span class="built_in">NSArray</span>*)m</span><br><span class="line">                               lock: (<span class="built_in">NSConditionLock</span>*)l;</span><br><span class="line">- (<span class="keyword">void</span>) fire;</span><br><span class="line">- (<span class="keyword">void</span>) invalidate;</span><br><span class="line">- (<span class="built_in">BOOL</span>) isInvalidated;</span><br><span class="line">- (<span class="built_in">NSArray</span>*) modes;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><code>GSPerformHolder</code> 封装了任务的细节(<code>receiver</code>, <code>argument</code>, <code>selector</code>)以及运行模式(<code>mode</code>)和一把条件锁( <code>NSConditionLock</code> )。<br>接着我们目光聚焦到源码 <code>performSelector:onThread:withObject:waitUntilDone:modes:</code>具体实现上:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) performSelector: (SEL)aSelector</span><br><span class="line">                onThread: (<span class="built_in">NSThread</span>*)aThread</span><br><span class="line">              withObject: (<span class="keyword">id</span>)anObject</span><br><span class="line">           waitUntilDone: (<span class="built_in">BOOL</span>)aFlag</span><br><span class="line">                   modes: (<span class="built_in">NSArray</span>*)anArray</span><br><span class="line">&#123;</span><br><span class="line">    GSRunLoopThreadInfo   *info;</span><br><span class="line">    <span class="built_in">NSThread</span>        *t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([anArray count] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    t = GSCurrentThread();</span><br><span class="line">    <span class="keyword">if</span> (aThread == <span class="literal">nil</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        aThread = t;</span><br><span class="line">    &#125;</span><br><span class="line">    info = GSRunLoopInfoForThread(aThread);</span><br><span class="line">    <span class="keyword">if</span> (t == aThread)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Perform in current thread.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (aFlag == <span class="literal">YES</span> || info-&gt;loop == <span class="literal">nil</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* Wait until done or no run loop.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            [<span class="keyword">self</span> performSelector: aSelector withObject: anObject];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* Don't wait ... schedule operation in run loop.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            [info-&gt;loop performSelector: aSelector</span><br><span class="line">                                 target: <span class="keyword">self</span></span><br><span class="line">                               argument: anObject</span><br><span class="line">                                  order: <span class="number">0</span></span><br><span class="line">                                  modes: anArray];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        GSPerformHolder   *h;</span><br><span class="line">        <span class="built_in">NSConditionLock</span>*l = <span class="literal">nil</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([aThread isFinished] == <span class="literal">YES</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="built_in">NSException</span> raise: <span class="built_in">NSInternalInconsistencyException</span></span><br><span class="line">                        format: <span class="string">@"perform [%@-%@] attempted on finished thread (%@)"</span>,</span><br><span class="line">             <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]),</span><br><span class="line">             <span class="built_in">NSStringFromSelector</span>(aSelector),</span><br><span class="line">             aThread];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (aFlag == <span class="literal">YES</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            l = [[<span class="built_in">NSConditionLock</span> alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        h = [GSPerformHolder newForReceiver: <span class="keyword">self</span></span><br><span class="line">                                   argument: anObject</span><br><span class="line">                                   selector: aSelector</span><br><span class="line">                                      modes: anArray</span><br><span class="line">                                       lock: l];</span><br><span class="line">        [info addPerformer: h];</span><br><span class="line">        <span class="keyword">if</span> (l != <span class="literal">nil</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            [l lockWhenCondition: <span class="number">1</span>];</span><br><span class="line">            [l unlock];</span><br><span class="line">            RELEASE(l);</span><br><span class="line">            <span class="keyword">if</span> ([h isInvalidated] == <span class="literal">NO</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/* If we have an exception passed back from the remote thread,</span></span><br><span class="line"><span class="comment">                 * re-raise it.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">nil</span> != h-&gt;exception)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">NSException</span>       *e = AUTORELEASE(RETAIN(h-&gt;exception));</span><br><span class="line">                    </span><br><span class="line">                    RELEASE(h);</span><br><span class="line">                    [e raise];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RELEASE(h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明一个 <code>GSRunLoopThreadInfo</code> 对象和一条 <code>NSThread</code> 线程</li><li>判断运行模式数组参数是否为空</li><li>获取当前线程，将结果赋值于第一步声明的局部线程变量</li><li>判断如果传入的要执行任务的线程 <code>aThread</code> 如果为空，那么就把当前线程赋值于到 <code>aThread</code> 上</li><li>确保 aThread 不为空之后获取该线程对应的 <code>GSRunLoopThreadInfo</code> 对象并赋值于第一步声明的局部 <code>info</code> 变量</li><li>确保 <code>info</code> 有值后，判断是否是在当前线程上执行任务</li><li>如果是在当前线程上执行任务，接着判断是否要阻塞当前线程，或当前线程的 <code>runloop</code> 为空。<ul><li>如果是的话，则直接调用 <code>performSelector:withObject</code> 来执行任务</li><li>如果不是的话，则通过线程对应的 <code>runloop</code>对象调用 <code>performSelector:target:argument:order:modes:</code> 来执行任务</li></ul></li><li><p>如果不是在当前线程上执行任务，声明一个 <code>GSPerformHolder</code> 局部变量，声明一把空的条件锁 <code>NSConditionLock</code></p><ul><li>判断要执行任务的线程是否已经被回收，如果已被回收，则抛出异常</li><li><p>如果未被回收</p><ul><li>判断是否要阻塞当前线程，如果传入的参数需要阻塞，则初始化条件锁</li><li>根据传入的参数及条件锁初始化  GSPerformHolder 实例</li><li>然后在 info 中加入 GSPerformHolder 实例</li><li>然后判断条件锁如果不为空，赋予条件锁何时加锁的条件，然后解锁条件锁，然后释放条件锁</li><li>判断 GSPerformHolder 局部变量是否已经被释放，如果没有被释放，抛出异常</li></ul></li></ul></li></ul><hr><ul><li><code>performSelectorOnMainThread:withObject:waitUntilDone:</code></li><li><code>performSelectorOnMainThread:withObject:waitUntilDone:modes:</code></li></ul><p>顾名思义，这两个方法其实就是在主线程上执行任务，根据传入的参数决定是否阻塞主线程，以及在哪些运行模式下执行任务。使用方法如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)jh_performSelectorOnMainThreadwithObjectwaitUntilDone</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> performSelectorOnMainThread:<span class="keyword">@selector</span>(threadTask:) withObject:@&#123;<span class="string">@"param"</span>: <span class="string">@"leejunhui"</span>&#125; waitUntilDone:<span class="literal">NO</span>];</span><br><span class="line"><span class="comment">//    [self performSelectorOnMainThread:@selector(threadTask:) withObject:@&#123;@"param": @"leejunhui"&#125; waitUntilDone:NO modes:@[NSRunLoopCommonModes]];</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)threadTask:(<span class="built_in">NSDictionary</span> *)param</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">31.783962</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">63614</span>:<span class="number">1057033</span>] -[ViewController threadTask:]</span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">31.784126</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">63614</span>:<span class="number">1057033</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x600002e76dc0</span>&gt;&#123;number = <span class="number">1</span>, name = main&#125;</span><br></pre></td></tr></table></figure><p>因为是在主线程上执行，所以并不需要手动开启 <code>runloop</code>。我们来看下这两个方法在 <code>GNUStep</code> 中底层实现:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) performSelectorOnMainThread: (SEL)aSelector</span><br><span class="line">                          withObject: (<span class="keyword">id</span>)anObject</span><br><span class="line">                       waitUntilDone: (<span class="built_in">BOOL</span>)aFlag</span><br><span class="line">                               modes: (<span class="built_in">NSArray</span>*)anArray</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* It's possible that this method could be called before the NSThread</span></span><br><span class="line"><span class="comment">     * class is initialised, so we check and make sure it's initiailised</span></span><br><span class="line"><span class="comment">     * if necessary.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (defaultThread == <span class="literal">nil</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="built_in">NSThread</span> currentThread];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> performSelector: aSelector</span><br><span class="line">                 onThread: defaultThread</span><br><span class="line">               withObject: anObject</span><br><span class="line">            waitUntilDone: aFlag</span><br><span class="line">                    modes: anArray];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) performSelectorOnMainThread: (SEL)aSelector</span><br><span class="line">                          withObject: (<span class="keyword">id</span>)anObject</span><br><span class="line">                       waitUntilDone: (<span class="built_in">BOOL</span>)aFlag</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> performSelectorOnMainThread: aSelector</span><br><span class="line">                           withObject: anObject</span><br><span class="line">                        waitUntilDone: aFlag</span><br><span class="line">                                modes: commonModes()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难看出，这里其实就是调用的 <code>performSelector:onThread:withObject:waitUntilDone:modes</code> 方法，但是有一个细节需要注意，就是有可能在 NSThread 类被初始化之前，就调用了 <code>performSelectorOnMainThread</code>方法，所以需要手动调用一下 <code>[NSThread currentThread]</code>。</p><hr><ul><li><code>performSelectorInBackground:withObject:</code></li></ul><p>最后要探索的是 <code>performSelectorInBackground:withObject:</code>方法，这个方法用法如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)jh_performSelectorOnBackground</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> performSelectorInBackground:<span class="keyword">@selector</span>(threadTask:) withObject:@&#123;<span class="string">@"param"</span>: <span class="string">@"leejunhui"</span>&#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)threadTask:(<span class="built_in">NSDictionary</span> *)param</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">36.751675</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">63660</span>:<span class="number">1061569</span>] -[ViewController threadTask:]</span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">36.751990</span>+<span class="number">0800</span> PerformSelectorIndepth[<span class="number">63660</span>:<span class="number">1061569</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x6000027a0ac0</span>&gt;&#123;number = <span class="number">6</span>, name = (null)&#125;</span><br></pre></td></tr></table></figure><p>根据输出我们可知，这里显然是开了一条子线程来执行任务，我们看一下 <code>GNUStep</code> 的底层实现:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) performSelectorInBackground: (SEL)aSelector</span><br><span class="line">                          withObject: (<span class="keyword">id</span>)anObject</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> detachNewThreadSelector: aSelector</span><br><span class="line">                             toTarget: <span class="keyword">self</span></span><br><span class="line">                           withObject: anObject];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在底层其实是调用的 <code>NSThread</code> 的类方法来执行传入的任务。关于 <code>NSThread</code> 细节我们后面会进行探索。</p><hr><h4 id="3-2-小结"><a href="#3-2-小结" class="headerlink" title="3.2 小结"></a>3.2 小结</h4><ul><li><code>performSelector:onThread:withObject:waitUntilDone:</code> 和 <code>performSelector:onThread:withObject:waitUntilDone:modes:</code><ul><li>在该方法所在线程的 runloop 处于给定的任一 mode 时，判断是否阻塞当前线程，并且处于下一次 runloop 消息循环的开头的时候触发给定的任务。</li></ul></li><li><code>performSelectorOnMainThread:withObject:waitUntilDone:</code> 和 <code>performSelectorOnMainThread:withObject:waitUntilDone:modes:</code><ul><li>当主线程的 runloop 处于给定的任一 mode 时，判断是否阻塞主线程，并且处于下一次 runloop 消息循环的开头的时候触发给定的任务。</li></ul></li><li><code>performSelectorInBackground:withObject:</code><ul><li>在子线程上执行给定的任务。底层是通过 <code>NSThread</code> 的 <code>detachNewThread</code> 实现。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2020/03/21/iOS查漏补缺之performSelector/performSelector_9.png" alt="Alt Text"></p><h5 id="参考资料：https-juejin-im-post-5e69fc9af265da57434bceb0-heading-11"><a href="#参考资料：https-juejin-im-post-5e69fc9af265da57434bceb0-heading-11" class="headerlink" title="参考资料：https://juejin.im/post/5e69fc9af265da57434bceb0#heading-11"></a>参考资料：<a href="https://juejin.im/post/5e69fc9af265da57434bceb0#heading-11" target="_blank" rel="noopener">https://juejin.im/post/5e69fc9af265da57434bceb0#heading-11</a></h5>]]></content>
    
    <summary type="html">
    
      探索iOS开发中 performSelector 奥秘...
    
    </summary>
    
      <category term="iOS" scheme="https://CoderLawrence.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://CoderLawrence.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>深入理解iOS中的RunLoop</title>
    <link href="https://CoderLawrence.github.io/2020/03/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3iOS%E4%B8%AD%E7%9A%84RunLoop/"/>
    <id>https://CoderLawrence.github.io/2020/03/06/深入理解iOS中的RunLoop/</id>
    <published>2020-03-06T03:52:10.000Z</published>
    <updated>2020-03-21T13:20:57.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这段时间在准备iOS的面试，所以需要全面复习iOS相关的知识，并且对iOS的知识做一次梳理和整理，于是有了这篇文章，这篇文章是出自<a href="https://github.com/ibireme/" target="_blank" rel="noopener">YY大神</a>的<a href="https://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="noopener">深入理解RunLoop</a>，我学习和阅读了感觉受益良多，所以摘录到我的博客中来。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>RunLoop是 iOS 和 OSX 开发中非常基础的一个概念，这篇文章将从 CFRunLoop 的源码入手，介绍RunLoop的概念以及底层原理。之后会介绍一下在 iOS 中，苹果如何利用 RunLoop 实现自动释放池、延迟回调、触摸事件、屏幕刷新等功能的。</p><h3 id="RunLoop-的概念"><a href="#RunLoop-的概念" class="headerlink" title="RunLoop 的概念"></a>RunLoop 的概念</h3><p>一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件并不退出，通常的代码逻辑是这样的：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function loop() &#123;</span><br><span class="line">    initialize();</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var message = get_next_message();</span><br><span class="line">        process_message(message);</span><br><span class="line">    &#125; <span class="keyword">while</span> (message != quit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种模型通常被称作Event Loop。Event Loop在很多系统和框架里都有实现，比如 Node.js 的事件处理，比如 Windows 程序的消息循环，再比如 OSX/iOS 里的 RunLoop。实现这种消息模型的关键点在于：如何管理事件/消息，如何让线程在没有消息时休眠以避免资源占用、再有消息到来时立刻唤醒。</p><p>所以，RunLoop 实际上就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面 Event Loop 的逻辑。线程执行了这个函数后，就会一直处于这个函数内部“接受-&gt;消息-&gt;等待-&gt;处理”的循环中，直到这个循环结束（比如传入quit的消息），函数返回。</p><p>OSX/iOS 系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。<br>CFRunLoopRef 是在 CoreFundation 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。</p><p>NSRunLoop 是基于 CFRunLoopRef 的封装，提供了面向对象的 API，但是这些 API 不是线程安全的。</p><p>CFRunLoopRef 的代码是 <a href="https://opensource.apple.com/source/CF/CF-855.17/CFRunLoop.c" target="_blank" rel="noopener">开源</a> 的，你可以在这里 <a href="http://opensource.apple.com/tarballs/CF/" target="_blank" rel="noopener">http://opensource.apple.com/tarballs/CF/</a> 下载到整个 CoreFoundation 的源码来查看。</p><p>(Update：Swift 开源后，苹果又维护了一个跨平台的 CoreFoundation版本：<a href="https://github.com/apple/swift-corelibs-foundation/" target="_blank" rel="noopener">https://github.com/apple/swift-corelibs-foundation/</a>，这本版本的源码可能和现有 iOS 系统中的实现略不一样，但更容易编译，而且已经适配了 Linux/Windows。)</p><h3 id="RunLoop-与线程的关系"><a href="#RunLoop-与线程的关系" class="headerlink" title="RunLoop 与线程的关系"></a>RunLoop 与线程的关系</h3><p>首先，iOS开发中能遇到的两个线程对象：pthread_t 和 NSThread。过去苹果有份<a href="https://www.fenestrated.net/mac/mirrors/Apple%20Technotes%20%28As%20of%202002%29/tn/tn2028.html" target="_blank" rel="noopener">文档</a>表明了 NSThread 只是 pthread_t 的封装，但那份文档已经失效了，现在它们可能都是直接包装自最底层的 mach thread。苹果并没有提供这两个对象相互转换的接口，但不管怎么样，可以肯定的是 pthread_t 和 NSThread 是一一对应的。比如，你可以通过 pthread_main_thread_np() 或 [NSThread mainThread] 来获取主线程；也可以通过 pthread_self() 或 [NSThread currentThread] 来获取当前线程。CFRunLoop 是基于 pthread 来管理的。</p><p>苹果不允许直接创建 RunLoop，它只提供了两个自动获取的函数：CFRunLoopGetMain() 和 CFRunLoopGetCurrent()。这两个函数内部的逻辑大概是下面这样：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 全局的Dictionary，key 是 pthread_t， value 是 CFRunLoopRef</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">CFMutableDictionaryRef</span> loopsDic;</span><br><span class="line"><span class="comment">/// 访问 loopsDic 时的锁</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">CFSpinLock_t</span> loopsLock;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/// 获取一个 pthread 对应的 RunLoop。</span></span><br><span class="line"><span class="built_in">CFRunLoopRef</span> _CFRunLoopGet(pthread_t thread) &#123;</span><br><span class="line">    OSSpinLockLock(&amp;loopsLock);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!loopsDic) &#123;</span><br><span class="line">        <span class="comment">// 第一次进入时，初始化全局Dic，并先为主线程创建一个 RunLoop。</span></span><br><span class="line">        loopsDic = <span class="built_in">CFDictionaryCreateMutable</span>();</span><br><span class="line">        <span class="built_in">CFRunLoopRef</span> mainLoop = _CFRunLoopCreate();</span><br><span class="line">        <span class="built_in">CFDictionarySetValue</span>(loopsDic, pthread_main_thread_np(), mainLoop);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 直接从 Dictionary 里获取。</span></span><br><span class="line">    <span class="built_in">CFRunLoopRef</span> loop = <span class="built_in">CFDictionaryGetValue</span>(loopsDic, thread));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!loop) &#123;</span><br><span class="line">        <span class="comment">/// 取不到时，创建一个</span></span><br><span class="line">        loop = _CFRunLoopCreate();</span><br><span class="line">        <span class="built_in">CFDictionarySetValue</span>(loopsDic, thread, loop);</span><br><span class="line">        <span class="comment">/// 注册一个回调，当线程销毁时，顺便也销毁其对应的 RunLoop。</span></span><br><span class="line">        _CFSetTSD(..., thread, loop, __CFFinalizeRunLoop);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    OSSpinLockUnLock(&amp;loopsLock);</span><br><span class="line">    <span class="keyword">return</span> loop;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">CFRunLoopRef</span> <span class="built_in">CFRunLoopGetMain</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> _CFRunLoopGet(pthread_main_thread_np());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">CFRunLoopRef</span> <span class="built_in">CFRunLoopGetCurrent</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> _CFRunLoopGet(pthread_self());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出，线程和 RunLoop 之间是一一对应的，其关系是保存在一个全局的 Dictionary 里。线程刚创建时并没有 RunLooop，如果你不主动获取，那它一直都不会有。RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁时发生在线程结束时，你只能在一个线程内部获取其 RunLoop （主线程除外）。</p><h3 id="RunLoop-对外的接口"><a href="#RunLoop-对外的接口" class="headerlink" title="RunLoop 对外的接口"></a>RunLoop 对外的接口</h3><p>在 CoreFoundation 里面关于 RunLoop 有5个类：</p><p>CFRunLoopRef<br><br>CFRunLoopModeRef<br><br>CFRunLoopSourceRef<br><br>CFRunLoopTimerRef<br><br>CFRunLoopObserverRef<br></p><p>其中 CFRunLoopModeRef 类并没有对外暴露，只是通过 CFRunLoopRef 的接口进行了封装。他们的关系如下:</p><p><img src="/2020/03/06/深入理解iOS中的RunLoop/./RunLoop_0.png" style="width: 300px; margin: 0px"></p><p>一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 RunLoop 的主函数时，只能指定其中一个 Mode，这个 Mode 被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的Source/Timer/Observer，让其互不影响。</p><p><strong>CFRunLoopSourceRef</strong> 是事件产生的地方。Source 有两个版本：Source0 和 Source1。</p><ul><li>Source0 只包含了一个回调（指针函数），它并不能主动触发事件。使用时，你需要先调用 CFRunLoopSourceSignal(source)，将这个 Source 标记为待处理，然后手动调用 CFRunLoopWakeUp(runloop) 来唤醒 RunLoop，让其处理这个时间。</li><li>Source1 包含了一个 mach_port 和一个回调（函数指针），被用于通过内核和其他线程互相发送消息。这种 Source 能主动唤醒 RunLoop 的线程，其原理在下面会讲到。</li></ul><p><strong>CFRunLoopTimerRef</strong> 是基于时间的触发器，它和 NSTimer 是 toll-free bridged 的，可以混用。其包含一个时间长度和一个回调（指针函数）。当其加入到 RunLoop 时，RunLoop 会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。</p><p><strong>CFRunLoopObserverRef</strong> 是观察者，每个 Observer 都包含了一个回调（函数指针），当 RunLoop的状态变化时，观察者就能通过回调接受到这个变化。可以观测的时间点有一下几个：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">CF_OPTIONS</span>(<span class="built_in">CFOptionFlags</span>, <span class="built_in">CFRunLoopActivity</span>) &#123;</span><br><span class="line">    kCFRunLoopEntry         = (<span class="number">1</span>UL &lt;&lt; <span class="number">0</span>), <span class="comment">// 即将进入Loop</span></span><br><span class="line">    kCFRunLoopBeforeTimers  = (<span class="number">1</span>UL &lt;&lt; <span class="number">1</span>), <span class="comment">// 即将处理 Timer</span></span><br><span class="line">    kCFRunLoopBeforeSources = (<span class="number">1</span>UL &lt;&lt; <span class="number">2</span>), <span class="comment">// 即将处理 Source</span></span><br><span class="line">    kCFRunLoopBeforeWaiting = (<span class="number">1</span>UL &lt;&lt; <span class="number">5</span>), <span class="comment">// 即将进入休眠</span></span><br><span class="line">    kCFRunLoopAfterWaiting  = (<span class="number">1</span>UL &lt;&lt; <span class="number">6</span>), <span class="comment">// 刚从休眠中唤醒</span></span><br><span class="line">    kCFRunLoopExit          = (<span class="number">1</span>UL &lt;&lt; <span class="number">7</span>), <span class="comment">// 即将退出Loop</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的 Source/Timer/Observer 被统称为 mode item，一个 item 可以被同时加入多个 mode。但一个 item 被重复加入同一个 mode 时是不会有效果。如果一个 mode 中一个 item 都没有，则 RunLoop 会直接退出，不进如循环。</p><h3 id="RunLoop-的-Mode"><a href="#RunLoop-的-Mode" class="headerlink" title="RunLoop 的 Mode"></a>RunLoop 的 Mode</h3><p>CFRunLoopMode  和 CFRunLoop 的结构大致如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __CFRunLoopMode &#123;</span><br><span class="line">    <span class="built_in">CFStringRef</span> _name;            <span class="comment">// Mode Name, 例如 @"kCFRunLoopDefaultMode"</span></span><br><span class="line">    <span class="built_in">CFMutableSetRef</span> _sources0;    <span class="comment">// Set</span></span><br><span class="line">    <span class="built_in">CFMutableSetRef</span> _sources1;    <span class="comment">// Set</span></span><br><span class="line">    <span class="built_in">CFMutableArrayRef</span> _observers; <span class="comment">// Array</span></span><br><span class="line">    <span class="built_in">CFMutableArrayRef</span> _timers;    <span class="comment">// Array</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> __CFRunLoop &#123;</span><br><span class="line">    <span class="built_in">CFMutableSetRef</span> _commonModes;     <span class="comment">// Set</span></span><br><span class="line">    <span class="built_in">CFMutableSetRef</span> _commonModeItems; <span class="comment">// Set&lt;Source/Observer/Timer&gt;</span></span><br><span class="line">    <span class="built_in">CFRunLoopModeRef</span> _currentMode;    <span class="comment">// Current Runloop Mode</span></span><br><span class="line">    <span class="built_in">CFMutableSetRef</span> _modes;           <span class="comment">// Set</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里有个概念叫 “CommonModes”：一个 Mode 可以将自己标记为 “Common”属性 （通过将其 ModeName 添加到 RunLoop 的 “commonModes”中）。每当 RunLoop 的内容发生变化时，RunLoop 都会自动将 _comonModeItems 里的 Source/Observer/Timer 同步到具有 “Common” 标记的所有Mode里。</p><p>应用场景举例：主线程的 RunLoop 里有两个预置的 Mode：KCFRunLoopDefaultMode 和 UITrackingRunLoopMode。这两个 Mode 都已经被标记为 “Common”属性。DefaultMode 是 App 平时所处的状态，TrackingRunLoopMode 是追踪 ScrollView 滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个TableView时，RunLoop 会将 mode 切换为 TrackingRunLoopMode，这时 Timer 就不会被回调，并且也不会影响到滑动操作。</p><p>有时你需要一个 Timer，在两个 Mode 中都能得到回调，一种办法是将这个 Timer 分别加入这两个 Mode。还有一种方式，就是将 Timer 加入到顶层的 RunLoop 的 “commonModeItems” 中。“commonModeItem” 被 RunLoop 自动更新到所有具有 “common” 属性的 Mode 里去。</p><p>CFRunLoop对外暴露的管理 Mode 接口只有下面2个：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFRunLoopAddCommonMode</span>(<span class="built_in">CFRunLoopRef</span> runloop, <span class="built_in">CFStringRef</span> modeName);</span><br><span class="line"><span class="built_in">CFRunLoopRunInMode</span>(<span class="built_in">CFStringRef</span> modeName, ...);</span><br></pre></td></tr></table></figure><p>Mode 暴露的管理 mode item 的接口有下面几个：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFRunLoopAddSource</span>(<span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFRunLoopSourceRef</span> source, <span class="built_in">CFStringRef</span> modeName);</span><br><span class="line"><span class="built_in">CFRunLoopAddObserver</span>(<span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFRunLoopObserverRef</span> observer, <span class="built_in">CFStringRef</span> modeName);</span><br><span class="line"><span class="built_in">CFRunLoopAddTimer</span>(<span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFRunLoopTimerRef</span> timer, <span class="built_in">CFStringRef</span> mode);</span><br><span class="line"><span class="built_in">CFRunLoopRemoveSource</span>(<span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFRunLoopSourceRef</span> source, <span class="built_in">CFStringRef</span> modeName);</span><br><span class="line"><span class="built_in">CFRunLoopRemoveObserver</span>(<span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFRunLoopObserverRef</span> observer, <span class="built_in">CFStringRef</span> modeName);</span><br><span class="line"><span class="built_in">CFRunLoopRemoveTimer</span>(<span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFRunLoopTimerRef</span> timer, <span class="built_in">CFStringRef</span> mode);</span><br></pre></td></tr></table></figure><p>你只能通过 mode name 来操作内部的 mode，当你传入一个新的 mode name 但 RunLoop 内部没有对应 mode 时，RunLoop会自动帮你创建对应的 CFRunLoopModeRef。对于一个 RunLoop 来说，其内部的 mode 只能增加不能删除。</p><p>苹果公开提供的 Mode 有两个： KCFRunLoopDefaultMode（NSDefaultRunLoopMode) 和 UITrackingRunLoopMode，你可以用这两个 Mode Name 来操作其对应的 Mode。</p><p>同时苹果还提供了一个操作 Common 标记的字符串：kCFRunLoopCommonModes（NSRunLoop CommonModes），你可以用这个字符串来操作 Common Items，或标记一个 Mode 为 “Common”。使用时注意区分这个字符串和其他 mode name。</p><h3 id="RunLoop-的内部逻辑"><a href="#RunLoop-的内部逻辑" class="headerlink" title="RunLoop 的内部逻辑"></a>RunLoop 的内部逻辑</h3><p>根据苹果在<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW23" target="_blank" rel="noopener">文档</a>里的说明，RunLoop 内部的逻辑大致如下：</p><p><img src="/2020/03/06/深入理解iOS中的RunLoop/./RunLoop_1.png" style="width: 600px; margin: 0px"></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 用DefaultMode启动</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">CFRunLoopRun</span>(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="built_in">CFRunLoopRunSpecific</span>(<span class="built_in">CFRunLoopGetCurrent</span>(), kCFRunLoopDefaultMode, <span class="number">1.0e10</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/// 用指定的Mode启动，允许设置RunLoop超时时间</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">CFRunLoopRunInMode</span>(<span class="built_in">CFStringRef</span> modeName, <span class="built_in">CFTimeInterval</span> seconds, Boolean stopAfterHandle) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CFRunLoopRunSpecific</span>(<span class="built_in">CFRunLoopGetCurrent</span>(), modeName, seconds, returnAfterSourceHandled);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/// RunLoop的实现</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">CFRunLoopRunSpecific</span>(runloop, modeName, seconds, stopAfterHandle) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 首先根据modeName找到对应mode</span></span><br><span class="line">    <span class="built_in">CFRunLoopModeRef</span> currentMode = __CFRunLoopFindMode(runloop, modeName, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">/// 如果mode里没有source/timer/observer, 直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (__CFRunLoopModeIsEmpty(currentMode)) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 1. 通知 Observers: RunLoop 即将进入 loop。</span></span><br><span class="line">    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 内部函数，进入loop</span></span><br><span class="line">    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) &#123;</span><br><span class="line">        </span><br><span class="line">        Boolean sourceHandledThisLoop = <span class="literal">NO</span>;</span><br><span class="line">        <span class="keyword">int</span> retVal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。</span></span><br><span class="line">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);</span><br><span class="line">            <span class="comment">/// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。</span></span><br><span class="line">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);</span><br><span class="line">            <span class="comment">/// 执行被加入的block</span></span><br><span class="line">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/// 4. RunLoop 触发 Source0 (非port) 回调。</span></span><br><span class="line">            sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);</span><br><span class="line">            <span class="comment">/// 执行被加入的block</span></span><br><span class="line">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。</span></span><br><span class="line">            <span class="keyword">if</span> (__Source0DidDispatchPortLastTime) &#123;</span><br><span class="line">                Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &amp;msg)</span><br><span class="line">                <span class="keyword">if</span> (hasMsg) <span class="keyword">goto</span> handle_msg;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。</span></span><br><span class="line">            <span class="keyword">if</span> (!sourceHandledThisLoop) &#123;</span><br><span class="line">                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。</span></span><br><span class="line">            <span class="comment">/// • 一个基于 port 的Source 的事件。</span></span><br><span class="line">            <span class="comment">/// • 一个 Timer 到时间了</span></span><br><span class="line">            <span class="comment">/// • RunLoop 自身的超时时间到了</span></span><br><span class="line">            <span class="comment">/// • 被其他什么调用者手动唤醒</span></span><br><span class="line">            __CFRunLoopServiceMachPort(waitSet, &amp;msg, <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort) &#123;</span><br><span class="line">                mach_msg(msg, MACH_RCV_MSG, port); <span class="comment">// thread wait for receive msg</span></span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。</span></span><br><span class="line">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/// 收到消息，处理消息。</span></span><br><span class="line">            handle_msg:</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。</span></span><br><span class="line">            <span class="keyword">if</span> (msg_is_timer) &#123;</span><br><span class="line">                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())</span><br><span class="line">            &#125; </span><br><span class="line"> </span><br><span class="line">            <span class="comment">/// 9.2 如果有dispatch到main_queue的block，执行block。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (msg_is_dispatch) &#123;</span><br><span class="line">                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class="line">            &#125; </span><br><span class="line"> </span><br><span class="line">            <span class="comment">/// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">CFRunLoopSourceRef</span> source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);</span><br><span class="line">                sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);</span><br><span class="line">                <span class="keyword">if</span> (sourceHandledThisLoop) &#123;</span><br><span class="line">                    mach_msg(reply, MACH_SEND_MSG, reply);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/// 执行加入到Loop的block</span></span><br><span class="line">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class="line">            </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class="line">                <span class="comment">/// 进入loop时参数说处理完事件就返回。</span></span><br><span class="line">                retVal = kCFRunLoopRunHandledSource;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">                <span class="comment">/// 超出传入参数标记的超时时间了</span></span><br><span class="line">                retVal = kCFRunLoopRunTimedOut;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopIsStopped(runloop)) &#123;</span><br><span class="line">                <span class="comment">/// 被外部调用者强制停止了</span></span><br><span class="line">                retVal = kCFRunLoopRunStopped;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopModeIsEmpty(runloop, currentMode)) &#123;</span><br><span class="line">                <span class="comment">/// source/timer/observer一个都没有了</span></span><br><span class="line">                retVal = kCFRunLoopRunFinished;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/// 如果没超时，mode里没空，loop也没被停止，那继续loop。</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (retVal == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 10. 通知 Observers: RunLoop 即将退出。</span></span><br><span class="line">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，实际上 RunLoop 就是这样一个函数，其内部是一个 do-while 循环。当你调用 CFRunLoopRun() 时，线程就会一直停留在这个循环里；直到超时或被手动停止，该函数才会返回。</p><h3 id="RunLoop-底层实现"><a href="#RunLoop-底层实现" class="headerlink" title="RunLoop 底层实现"></a>RunLoop 底层实现</h3><p>从上面代码可以看到，RunLoop 的核心是基于 mach port 的，其进入休眠时调用的函数是 mach_msg()。为了解释这个逻辑，下面稍微介绍一下 OSX/iOS 的系统架构。</p><p><img src="/2020/03/06/深入理解iOS中的RunLoop/./RunLoop_3.png" style="width: 300px; margin: 0px"></p><p>苹果官方将整个系统大致划分为上述4个层次：<br><br>应用层包括用户能接触到的图形应用，例如 Spotlight、Aqua、SpringBoard 等。<br><br>应用框架层即开发人员接触到的 Cocoa 等框架。<br><br>核心框架层包括各种核心架构、OpenGL 等内容。<br><br>Darwin 即操作系统的核心，包括系统内核、驱动、Shell 等内容，这一层是开源的，其所有源码都可以在 <a href="https://opensource.apple.com/" target="_blank" rel="noopener">opensource.apple.com</a> 里找到。</p><p>我们在深入看一下 Darwin 这个核心的架构：</p><p><img src="/2020/03/06/深入理解iOS中的RunLoop/./RunLoop_4.png" style="width: 350px; margin: 0px"></p><p>其中，在硬件层上面的三个组成部分：Mach、BSD、IOKit (还包括一些上面没标注的内容)，共同组成了 XNU 内核。<br><br>XNU 内核的内环被称作 Mach，其作为一个微内核，仅提供了诸如处理器调度、IPC (进程间通信)等非常少量的基础服务。<br><br>BSD 层可以看作围绕 Mach 层的一个外环，其提供了诸如进程管理、文件系统和网络等功能。<br><br>IOKit 层是为设备驱动提供了一个面向对象(C++)的一个框架。</p><p>Mach 的消息定义是在 &lt;mach/message.h&gt; 头文件的，很简单：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  mach_msg_header_t header;</span><br><span class="line">  mach_msg_body_t body;</span><br><span class="line">&#125; mach_msg_base_t;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  mach_msg_bits_t msgh_bits;</span><br><span class="line">  mach_msg_size_t msgh_size;</span><br><span class="line">  mach_port_t msgh_remote_port;</span><br><span class="line">  mach_port_t msgh_local_port;</span><br><span class="line">  mach_port_name_t msgh_voucher_port;</span><br><span class="line">  mach_msg_id_t msgh_id;</span><br><span class="line">&#125; mach_msg_header_t;</span><br></pre></td></tr></table></figure><p>一条 Mach 消息实际上就是一个二进制数据包 (BLOB)，其头部定义了当前端口 local_port 和目标端口 remote_port，<br><br>发送和接受消息是通过同一个 API 进行的，其 option 标记了消息传递的方向：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mach_msg_return_t mach_msg(</span><br><span class="line">mach_msg_header_t *msg,</span><br><span class="line">mach_msg_option_t option,</span><br><span class="line">mach_msg_size_t send_size,</span><br><span class="line">mach_msg_size_t rcv_size,</span><br><span class="line">mach_port_name_t rcv_name,</span><br><span class="line">mach_msg_timeout_t timeout,</span><br><span class="line">mach_port_name_t notify);</span><br></pre></td></tr></table></figure><p>为了实现消息的发送和接收，mach_msg() 函数实际上是调用了一个 Mach 陷阱 (trap)，即函数mach_msg_trap()，陷阱这个概念在 Mach 中等同于系统调用。当你在用户态调用 mach_msg_trap() 时会触发陷阱机制，切换到内核态；内核态中内核实现的 mach_msg() 函数会完成实际的工作，如下图：</p><p><img src="/2020/03/06/深入理解iOS中的RunLoop/./RunLoop_5.png" style="width: 350px; margin: 0px"></p><p>这些概念可以参考维基百科: <a href="https://en.wikipedia.org/wiki/System_call" target="_blank" rel="noopener">System_call</a>、<a href="https://en.wikipedia.org/wiki/Trap_(computing" target="_blank" rel="noopener">Trap_(computing)</a>)。</p><p>RunLoop 的核心就是一个 mach_msg() (见上面代码的第7步)，RunLoop 调用这个函数去接收消息，如果没有别人发送 port 消息过来，内核会将线程置于等待状态。例如你在模拟器里跑起一个 iOS 的 App，然后在 App 静止时点击暂停，你会看到主线程调用栈是停留在 mach_msg_trap() 这个地方。</p><p>关于具体的如何利用 mach port 发送信息，可以看看 <a href="https://nshipster.com/inter-process-communication/" target="_blank" rel="noopener">NSHipster</a> 这一篇文章，或者这里的<a href="https://segmentfault.com/a/1190000002400329" target="_blank" rel="noopener">中文</a>翻译 。</p><h3 id="苹果用-RunLoop-实现的功能"><a href="#苹果用-RunLoop-实现的功能" class="headerlink" title="苹果用 RunLoop 实现的功能"></a>苹果用 RunLoop 实现的功能</h3><p>首先我们可以看一下 App 启动后RunLoop 的状态：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFRunLoop</span> &#123;</span><br><span class="line">    current mode = kCFRunLoopDefaultMode</span><br><span class="line">    common modes = &#123;</span><br><span class="line">        <span class="built_in">UITrackingRunLoopMode</span></span><br><span class="line">        kCFRunLoopDefaultMode</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    common mode items = &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// source0 (manual)</span></span><br><span class="line">        <span class="built_in">CFRunLoopSource</span> &#123;order =<span class="number">-1</span>, &#123;</span><br><span class="line">            callout = _UIApplicationHandleEventQueue&#125;&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopSource</span> &#123;order =<span class="number">-1</span>, &#123;</span><br><span class="line">            callout = PurpleEventSignalCallback &#125;&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>, &#123;</span><br><span class="line">            callout = FBSSerialQueueRunLoopSourceHandler&#125;&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// source1 (mach port)</span></span><br><span class="line">        <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>,  &#123;port = <span class="number">17923</span>&#125;&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>,  &#123;port = <span class="number">12039</span>&#125;&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>,  &#123;port = <span class="number">16647</span>&#125;&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopSource</span> &#123;order =<span class="number">-1</span>, &#123;</span><br><span class="line">            callout = PurpleEventCallback&#125;&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>, &#123;port = <span class="number">2407</span>,</span><br><span class="line">            callout = _ZL20notify_port_callbackP12__CFMachPortPvlS1_&#125;&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>, &#123;port = <span class="number">1</span>c03,</span><br><span class="line">            callout = __IOHIDEventSystemClientAvailabilityCallback&#125;&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>, &#123;port = <span class="number">1</span>b03,</span><br><span class="line">            callout = __IOHIDEventSystemClientQueueCallback&#125;&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">1</span>, &#123;port = <span class="number">1903</span>,</span><br><span class="line">            callout = __IOMIGMachPortPortCallback&#125;&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Ovserver</span></span><br><span class="line">        <span class="built_in">CFRunLoopObserver</span> &#123;order = <span class="number">-2147483647</span>, activities = <span class="number">0x1</span>, <span class="comment">// Entry</span></span><br><span class="line">            callout = _wrapRunLoopWithAutoreleasePoolHandler&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopObserver</span> &#123;order = <span class="number">0</span>, activities = <span class="number">0x20</span>,          <span class="comment">// BeforeWaiting</span></span><br><span class="line">            callout = _UIGestureRecognizerUpdateObserver&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopObserver</span> &#123;order = <span class="number">1999000</span>, activities = <span class="number">0xa0</span>,    <span class="comment">// BeforeWaiting | Exit</span></span><br><span class="line">            callout = _afterCACommitHandler&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopObserver</span> &#123;order = <span class="number">2000000</span>, activities = <span class="number">0xa0</span>,    <span class="comment">// BeforeWaiting | Exit</span></span><br><span class="line">            callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv&#125;</span><br><span class="line">        <span class="built_in">CFRunLoopObserver</span> &#123;order = <span class="number">2147483647</span>, activities = <span class="number">0xa0</span>, <span class="comment">// BeforeWaiting | Exit</span></span><br><span class="line">            callout = _wrapRunLoopWithAutoreleasePoolHandler&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Timer</span></span><br><span class="line">        <span class="built_in">CFRunLoopTimer</span> &#123;firing = No, interval = <span class="number">3.1536e+09</span>, tolerance = <span class="number">0</span>,</span><br><span class="line">            next fire date = <span class="number">453098071</span> (<span class="number">-4421.76019</span> @ <span class="number">96223387169499</span>),</span><br><span class="line">            callout = _ZN2CAL14timer_callbackEP16__CFRunLoopTimerPv (QuartzCore.framework)&#125;</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    modes ＝ &#123;</span><br><span class="line">        <span class="built_in">CFRunLoopMode</span>  &#123;</span><br><span class="line">            sources0 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">            sources1 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">            observers = &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">            timers =    &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">CFRunLoopMode</span>  &#123;</span><br><span class="line">            sources0 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">            sources1 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">            observers = &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">            timers =    &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">CFRunLoopMode</span>  &#123;</span><br><span class="line">            sources0 = &#123;</span><br><span class="line">                <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>, &#123;</span><br><span class="line">                    callout = FBSSerialQueueRunLoopSourceHandler&#125;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            sources1 = (null),</span><br><span class="line">            observers = &#123;</span><br><span class="line">                <span class="built_in">CFRunLoopObserver</span> &gt;&#123;activities = <span class="number">0xa0</span>, order = <span class="number">2000000</span>,</span><br><span class="line">                    callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv&#125;</span><br><span class="line">            )&#125;,</span><br><span class="line">            timers = (null),</span><br><span class="line">        &#125;,</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">CFRunLoopMode</span>  &#123;</span><br><span class="line">            sources0 = &#123;</span><br><span class="line">                <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">-1</span>, &#123;</span><br><span class="line">                    callout = PurpleEventSignalCallback&#125;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            sources1 = &#123;</span><br><span class="line">                <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">-1</span>, &#123;</span><br><span class="line">                    callout = PurpleEventCallback&#125;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            observers = (null),</span><br><span class="line">            timers = (null),</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CFRunLoopMode</span>  &#123;</span><br><span class="line">            sources0 = (null),</span><br><span class="line">            sources1 = (null),</span><br><span class="line">            observers = (null),</span><br><span class="line">            timers = (null),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，系统默认注册了5个Mode：<br>1、kCFRunLoopDefaultMode: App默认的 Mode，通常主线程是在这个 Mode 下运行的。<br><br>2、UITrackingRunLoopMode: 界面跟踪 Mode，用于 ScrollView 跟踪触摸滑动，保证界面不受其他 Mode 影响。<br><br>3、UIInitializationRunLoopMode：在刚启动 App 时进入的第一个 Mode，启动完成后就不再使用。<br><br>4、GSEventReceiveRunLoopMode：接受系统事件的内部 Mode，通常用不到。<br><br>5、KCFRunLoopCommonModes: 这是一个占位的 Mode，没有实际作用。</p><p>你可以在<a href="http://iphonedevwiki.net/index.php/CFRunLoop" target="_blank" rel="noopener">这里</a>看到更多的苹果内部的 Mode，但那些 Mode 在开发中就很难遇到了。</p><p>当 RunLoop 进行回调时，一般都是通过一个很长的函数调用出去 (call out), 当你在你的代码中下断点调试时，通常能在调用栈上看到这些函数。下面是这几个函数的整理版本，如果你在调用栈中看到这些长函数名，在这里查找一下就能定位到具体的调用地点了：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">/// 1. 通知Observers，即将进入RunLoop</span></span><br><span class="line">    <span class="comment">/// 此处有Observer会创建AutoreleasePool: _objc_autoreleasePoolPush();</span></span><br><span class="line">    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopEntry);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/// 2. 通知 Observers: 即将触发 Timer 回调。</span></span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeTimers);</span><br><span class="line">        <span class="comment">/// 3. 通知 Observers: 即将触发 Source (非基于port的,Source0) 回调。</span></span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeSources);</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/// 4. 触发 Source0 (非基于port的) 回调。</span></span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__(source0);</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/// 6. 通知Observers，即将进入休眠</span></span><br><span class="line">        <span class="comment">/// 此处有Observer释放并新建AutoreleasePool: _objc_autoreleasePoolPop(); _objc_autoreleasePoolPush();</span></span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeWaiting);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/// 7. sleep to wait msg.</span></span><br><span class="line">        mach_msg() -&gt; mach_msg_trap();</span><br><span class="line">        </span><br><span class="line"> </span><br><span class="line">        <span class="comment">/// 8. 通知Observers，线程被唤醒</span></span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopAfterWaiting);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/// 9. 如果是被Timer唤醒的，回调Timer</span></span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__(timer);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/// 9. 如果是被dispatch唤醒的，执行所有调用 dispatch_async 等方法放入main queue 的 block</span></span><br><span class="line">        __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(dispatched_block);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/// 9. 如果如果Runloop是被 Source1 (基于port的) 的事件唤醒了，处理这个事件</span></span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__(source1);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &#125; <span class="keyword">while</span> (...);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/// 10. 通知Observers，即将退出RunLoop</span></span><br><span class="line">    <span class="comment">/// 此处有Observer释放AutoreleasePool: _objc_autoreleasePoolPop();</span></span><br><span class="line">    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopExit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AutoreleasePool"><a href="#AutoreleasePool" class="headerlink" title="AutoreleasePool"></a>AutoreleasePool</h3><p>App启动后，苹果在主线 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。</p><p>第一个 Observer 监视的事件是 Entry（即将进入Loop），其回调内会调用 _objc_autoreleasePoolPush() 创建自动释放池。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。</p><p>第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用 _objc_autoreleasePoolPop() 和 _objc_autoreleasePoolPush() 释放旧的池并创建新池；Exit（即将推出Loop）时调用 _objc_autoreleasePoolPop() 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。</p><p>在主线程执行的代码，通常是写在诸如事件回调，Timer回调内的。这些回调会被 RunLoop 创建好的 AutoReleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</p><h3 id="事件响应"><a href="#事件响应" class="headerlink" title="事件响应"></a>事件响应</h3><p>苹果注册了一个Source1（基于 mach port的）用来接收系统事件，其回调函数为 __IOHIDEventSystemClientQueueCallback()。</p><p>当一个硬件事件（触摸/锁屏/摇晃等)发生后，首先由 IOKit.framework 生成一个 IOHIDEvent 事件并不由 SpringBoard 接收。这个过程的详细情况可以参考<a href="http://iphonedevwiki.net/index.php/IOHIDFamily" target="_blank" rel="noopener">这里</a>。SpringBoard 只接收按键（锁屏/静音等），触摸，加速，接近传感器等几种 Event，随后 mach port 转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用_UIApplicationHandleEventQueue() 进行应用内部转发。</p><p>_UIApplicationHandleEventQueue() 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如 UIButon 点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。</p><h3 id="手势识别"><a href="#手势识别" class="headerlink" title="手势识别"></a>手势识别</h3><p>当上面的 _UIApplicationHandleEventQueue() 识别了一个手势时，其首先会调用 Cancel 将当前的touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。</p><p>苹果注册了一个 Observer 监测 BeforeWaiting(Loop即将进入休眠) 事件，这个 Observer 的回调函数是 _UIGestureRecognizerUpdateObserver()，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行 GestureRecognizer 的回调。</p><p>当有 UIGestureRecognizer 的变化（创建/销毁/状态改变）时，这个回调都会进行相应处理。</p><h3 id="界面更新"><a href="#界面更新" class="headerlink" title="界面更新"></a>界面更新</h3><p>当在操作 UI 时，比如改变了 Frame、更新了 UIView/CALayer 的层次时，或者手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer就被标记为待处理，并被提交到一个全局的容器去。</p><p>苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：<br>_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()。这个函数里会遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面。</p><p>这个函数内部的调用栈大概是这样的：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()</span><br><span class="line">    QuartzCore:CA::Transaction::observer_callback:</span><br><span class="line">        CA::Transaction::commit();</span><br><span class="line">            CA::Context::commit_transaction();</span><br><span class="line">                CA::Layer::layout_and_display_if_needed();</span><br><span class="line">                    CA::Layer::layout_if_needed();</span><br><span class="line">                        [<span class="built_in">CALayer</span> layoutSublayers];</span><br><span class="line">                            [<span class="built_in">UIView</span> layoutSubviews];</span><br><span class="line">                    CA::Layer::display_if_needed();</span><br><span class="line">                        [<span class="built_in">CALayer</span> display];</span><br><span class="line">                            [<span class="built_in">UIView</span> drawRect];</span><br></pre></td></tr></table></figure><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>NSTimer 其实是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。例如 10:00, 10:10, 10:20 这几个时间点。RunLoop 为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。</p><p>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。就比如等公交，如果 10:10 时我忙着玩手机错过了那个点的公交，那我只能等 10:20 这一趟了。</p><p>CADisplayLink 是一个和屏幕刷新率一致的定时器（但实际实现原理复杂，和 NSTimer 并不一样，其内部实际是操作了一个 Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。Facebook 开源的 AsyncDisplayLink 就是为了解决界面卡顿的问题，其内部也用到了 RunLoop。</p><h3 id="PerformSelecter"><a href="#PerformSelecter" class="headerlink" title="PerformSelecter"></a>PerformSelecter</h3><p>当调用 NSObject 的 performSelector:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。</p><p>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。</p><h3 id="关于GCD"><a href="#关于GCD" class="headerlink" title="关于GCD"></a>关于GCD</h3><p>实际上 RunLoop 底层也会用到 CCD 的东西，例如 GCD 提供的某些接口也用到了 RunLoop，例如 dispatch_async()。</p><p>当调用 dispatch_async(dispatch_get_main_queue(), block) 时，libDispatch 会向主线程的 RunLoop 发送消息，RunLoop 会被唤醒，并从消息中取得这个 block，并在回调 _CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE_() 里执行这个block。但这个逻辑仅限于 dispatch 到主线程，dispatch 到其他线程仍然是由 libDispatch 处理的</p><h3 id="关于网络请求"><a href="#关于网络请求" class="headerlink" title="关于网络请求"></a>关于网络请求</h3><p>iOS中，关于网络请求的接口自下至上有如下几层：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFSocket</span></span><br><span class="line"><span class="built_in">CFNetwork</span>       -&gt;ASIHttpRequest</span><br><span class="line"><span class="built_in">NSURLConnection</span> -&gt;AFNetworking</span><br><span class="line"><span class="built_in">NSURLSession</span>    -&gt;AFNetworking2, Alamofire</span><br></pre></td></tr></table></figure><ul><li>CFSocket 是最底层的接口，只负责 socket 通信。</li><li>CFNetwork 是基于 CFSocket 等接口的上层封装，ASIHttpRequest 工作于这一层。</li><li>NSURLConnection 是基于 CFNetwork 的更高层的封装，提供面向对象的接口，AFNetworking 工作于这一层。</li><li>NSURLSession 是 iOS7 中新增的接口，表面上是和 NSURLConnection 并列的，但底层仍然用到了 NSURLConnection 的部分功能 (比如 com.apple.NSURLConnectionLoader 线程)，AFNetworking2 和 Alamofire 工作于这一层。</li></ul><p>下面主要介绍下 NSURLConnection 的工作过程。</p><p>通常使用 NSURLConnection 时，你会传入一个 Delegate，当调用了 [connection start] 后，这个 Delegate 就会不停收到事件回调。实际上，start 这个函数的内部会会获取 CurrentRunLoop，然后在其中的 DefaultMode 添加了4个 Source0 (即需要手动触发的Source)。CFMultiplexerSource 是负责各种 Delegate 回调的，CFHTTPCookieStorage 是处理各种 Cookie 的。</p><p>当开始网络传输时，我们可以看到 NSURLConnection 创建了两个新线程：com.apple.NSURLConnectionLoader 和 com.apple.CFSocket.private。其中 CFSocket 线程是处理底层 socket 连接的。NSURLConnectionLoader 这个线程内部会使用 RunLoop 来接收底层 socket 的事件，并通过之前添加的 Source0 通知到上层的 Delegate。</p><p><img src="/2020/03/06/深入理解iOS中的RunLoop/./RunLoop_network.png" style="width: 600px; margin: 0px"></p><p>NSURLConnectionLoader 中的 RunLoop 通过一些基于 mach port 的 Source 接收来自底层 CFSocket 的通知。当收到通知后，其会在合适的时机向 CFMultiplexerSource 等 Source0 发送通知，同时唤醒 Delegate 线程的 RunLoop 来让其处理这些通知。CFMultiplexerSource 会在 Delegate 线程的 RunLoop 对 Delegate 执行实际的回调。</p><h3 id="RunLoop-的实际应用举例"><a href="#RunLoop-的实际应用举例" class="headerlink" title="RunLoop 的实际应用举例"></a>RunLoop 的实际应用举例</h3><h4 id="AsyncDisplayKit"><a href="#AsyncDisplayKit" class="headerlink" title="AsyncDisplayKit"></a>AsyncDisplayKit</h4><p><a href="https://github.com/facebookarchive/AsyncDisplayKit" target="_blank" rel="noopener">AsyncDisplayKit</a>是 Facebook 推出的用于保持界面流畅性的框架，其原理大致如下：</p><p>UI 线程中一旦出现繁重的任务就会导致界面卡顿，这类任务通常分为3类：排版，绘制，UI对象操作。</p><p>排版通常包括计算视图大小、计算文本高度、重新计算子式图的排版等操作。<br><br>绘制一般有文本绘制 (例如 CoreText)、图片绘制 (例如预先解压)、元素绘制 (Quartz)等操作。<br><br>UI对象操作通常包括 UIView/CALayer 等 UI 对象的创建、设置属性和销毁。</p><p>其中前两类操作可以通过各种方法扔到后台线程执行，而最后一类操作只能在主线程完成，并且有时后面的操作需要依赖前面操作的结果 （例如TextView创建时可能需要提前计算出文本的大小）。ASDK 所做的，就是尽量将能放入后台的任务放入后台，不能的则尽量推迟 (例如视图的创建、属性的调整)。</p><p>为此，ASDK 创建了一个名为 ASDisplayNode 的对象，并在内部封装了 UIView/CALayer，它具有和 UIView/CALayer 相似的属性，例如 frame、backgroundColor等。所有这些属性都可以在后台线程更改，开发者可以只通过 Node 来操作其内部的 UIView/CALayer，这样就可以将排版和绘制放入了后台线程。但是无论怎么操作，这些属性总需要在某个时刻同步到主线程的 UIView/CALayer 去。</p><p>ASDK 仿照 QuartzCore/UIKit 框架的模式，实现了一套类似的界面更新的机制：即在主线程的 RunLoop 中添加一个 Observer，监听了 kCFRunLoopBeforeWaiting 和 kCFRunLoopExit 事件，在收到回调时，遍历所有之前放入队列的待处理的任务，然后一一执行。</p>]]></content>
    
    <summary type="html">
    
      深入理解iOS中的RunLoop，带你揭开其面纱...
    
    </summary>
    
      <category term="iOS" scheme="https://CoderLawrence.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://CoderLawrence.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UIView与CALayer的关系</title>
    <link href="https://CoderLawrence.github.io/2020/03/04/UIView%E4%B8%8ECALayer%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>https://CoderLawrence.github.io/2020/03/04/UIView与CALayer的关系/</id>
    <published>2020-03-04T01:16:18.000Z</published>
    <updated>2020-03-04T07:03:51.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近去面试，被面试官问到UIView与CALayer的关系是什么，想了一下支支吾吾地回答了：“UIView负责确定UI的位置，它包含CALAyer，CALayer负责视图内容的绘制位置大小确定等”，鉴于对两者之前的关系的理解的不够透彻，于是有了这篇文章。</p><h3 id="首先我们要理解UIView以及它的一个继承关系等"><a href="#首先我们要理解UIView以及它的一个继承关系等" class="headerlink" title="首先我们要理解UIView以及它的一个继承关系等"></a>首先我们要理解UIView以及它的一个继承关系等</h3><p>UIView表示屏幕上的一块矩形区域，它是基本上iOS所有可视化控件的父类，UIView可以管理矩形区域里的内容，处理矩形区域的事件，包括对子视图的管理以及动画的实现。</p><p>UIKit的控件的继承关系（图片摘自网络）：<br><img src="/2020/03/04/UIView与CALayer的关系/1.jpg" alt="Alt text）"><br>上面的图是UIKit相关类的继承关系，从上面可以看出，UIView继承自UIResponder，所以UIView可以做事件响应，它也是iOS中所有视图（控件）直接或者间接的父类。</p><h3 id="简单介绍一下UIResponder"><a href="#简单介绍一下UIResponder" class="headerlink" title="简单介绍一下UIResponder"></a>简单介绍一下UIResponder</h3><p>在UIKit中UIResponder作为响应事件的对象，来响应系统传递过来的事件并进行处理。在UIResponder中定义了处理各种事件传递的接口。<br>UIApplication、UIViewController、UIView、和所有从UIView派生出来的UIKit类（包括UIWindow）都直接或间接地继承自UIResponder类。<br>而CALayer直接继承NSObject，并没有相应的处理事件的接口。</p><h3 id="UIView和CALayer的关系"><a href="#UIView和CALayer的关系" class="headerlink" title="UIView和CALayer的关系"></a>UIView和CALayer的关系</h3><p>在每个UIView实例当中，都有一个默认的支持图层layer，UIView负责创建并且管理这个图层，实际上UIView之所以能够显示，就是因为它里面有这个一个层，才具有显示的功能，UView仅仅是对它的一层封装，实现了CALayer的delegate，提供了处理事件交互的具体功能，还有动画底层方法的高级API，可以说CALayer是UIView的内部实现细节。</p><p>如下图（图片来源于网络）：<br><img src="/2020/03/04/UIView与CALayer的关系/2.png" alt="Alt text）"></p><h3 id="UIView与CALayer的区别"><a href="#UIView与CALayer的区别" class="headerlink" title="UIView与CALayer的区别"></a>UIView与CALayer的区别</h3><ul><li><strong>UIView能够响应事件，CALayer不可以</strong></li><li><strong>UIView是CALayer的delegate</strong></li><li><strong>UIView只是处理事件，CALayer主要负责图层的绘制</strong></li><li><strong>每个UIView内部都有一个CALayer在背后提供内容绘制和显示，而且UIView的尺寸样式都由内部的Layer所提供。两者都有树状层级结构，layer内部有SubLayers，View内部有SubViews。但是Layer比View多了AnchorPoint</strong></li><li><strong>一个Layer的frame是由它anchorPoint,position,bounds,和 transform 共同决定的，而一个View的frame只是简单的返回Layer的frame</strong></li><li><strong>在iOS做动画的时候，修改非RootLayer的属性（譬如位置、背景色等）会默认产生隐式动画，而修改UIView则不会</strong></li></ul>]]></content>
    
    <summary type="html">
    
      最近去面试，被面试官问到UIView与CALayer的关系是什么...
    
    </summary>
    
      <category term="iOS" scheme="https://CoderLawrence.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://CoderLawrence.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>block为什么要用copy来修饰</title>
    <link href="https://CoderLawrence.github.io/2020/03/03/block%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8copy/"/>
    <id>https://CoderLawrence.github.io/2020/03/03/block为什么要用copy/</id>
    <published>2020-03-03T01:11:40.000Z</published>
    <updated>2020-03-22T15:03:23.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前段时间因为打算换工作，本来以为我已经复习好做好面试的准备了，结果约了一场面试，面试官问我了这个问题，我竟然回答得不知所措，所以赶紧学习脑补一下</p><h3 id="关于block为什么要使用copy修复符，首先我们要了解一下关于栈区和堆区的概念"><a href="#关于block为什么要使用copy修复符，首先我们要了解一下关于栈区和堆区的概念" class="headerlink" title="关于block为什么要使用copy修复符，首先我们要了解一下关于栈区和堆区的概念"></a>关于block为什么要使用copy修复符，首先我们要了解一下关于栈区和堆区的概念</h3><ul><li>内存的栈区：由编译器自动分配和释放，存放函数的参数值，局部变量的值等，其操作类似数据结构的栈。</li><li>内存的堆区：一般由程序员分配和释放，若程序员不释放，程序结束时可能有OS进行回收，注意这里的内存堆区与数据结构中的堆是两回事，分配方式倒是类似于链表。</li></ul><h3 id="在iOS中block的类型"><a href="#在iOS中block的类型" class="headerlink" title="在iOS中block的类型"></a>在iOS中block的类型</h3><p>想必很多开发人员知道一般用copy修饰block，但是为什么要使用copy来修饰呢，其实在Objective-C语言中，一共有3中类型的block：</p><ul><li>_NSConcreteGlobalBlock 全局的静态 block，不会访问外部局部变量（显然包括无外部变量或者全局变量）</li><li>_NSConcreteStackBlock 保存在栈中的 block，当函数返回时会被销毁。</li><li>_NSConcreteMallocBlock 保存在堆中的 block，当应用计数为 0 时。</li></ul><p>测试代码代码（摘自网络）：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)<span class="keyword">void</span>(^demoBolck)();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)<span class="keyword">void</span>(^demoBolck1)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b=<span class="number">8</span>;<span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> (^demoBolck)() = ^&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"indemoBolck"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"demoBolck %@"</span>,demoBolck);    <span class="comment">//&lt;__NSGlobalBlock__: 0x1085af0e0&gt;  无论ARC还是MRC下，因不访问外部局部(包括无外部变量或者只有全局变量)，NSGlobalBlock表示在全局区</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> (^demoBolck4)() = ^&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"indemoBolck4  %d"</span>,b);</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"demoBolck4 %@"</span>,demoBolck4);    <span class="comment">//&lt;__NSGlobalBlock__: 0x10150b120&gt;  全局区</span></span><br><span class="line"></span><br><span class="line">    __block <span class="keyword">int</span> a = <span class="number">6</span>;   <span class="comment">//block内部引用a，并修改其值，需要用block修饰，不然可以不用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> (^demoBolck2)() = ^&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"indemoBolck2 %d"</span>,a++);</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    demoBolck2();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"demoBolck2 %@,%d"</span>,demoBolck2,a);   <span class="comment">//&lt;__NSMallocBlock__: 0x600000056c50&gt; ARC下堆区,在ARC模式下,系统也会默认对Block进行copy操作，Block的内存地址这时候便显示在堆区 &lt;__NSStackBlock__: 0x7fff5d0ada28&gt;MRC下在栈区</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"demoBolck2.Copy %@"</span>,[demoBolck2 <span class="keyword">copy</span>]);    <span class="comment">//&lt;__NSMallocBlock__: 0x600000056c50&gt;copy操作不管MRC或者ARC都在堆区，只是在MRC下进行copy会改变地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.demoBolck = demoBolck2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.demoBolck %@"</span>,<span class="keyword">self</span>.demoBolck);<span class="comment">//堆区&lt;__NSMallocBlock__: 0x608000052630&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.demoBolck1 = demoBolck2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.demoBolck1();     <span class="comment">//demoBolck2  7   能执行无问题</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self.demoBolck1 %@"</span>,<span class="keyword">self</span>.demoBolck1);     <span class="comment">//&lt;__NSMallocBlock__: 0x600000056c50&gt;  strong修饰ARC和MRC都并没有问题, 但是assign和retain在MRC环境下是还是在栈区的，会有问题</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意：MRC环境下:demoBolck1用assign，retain修饰，栈区：&lt;__NSStackBlock__: 0x7fff50915a50&gt;，提前释放了所以运行到下面语句程序会崩溃。ARC环境下：用copy，strong, assign, retain修饰是可以正常打印出结果的。 无论什么环境，用copy，strong修饰是可以正常打印出结果的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.demoBolck1();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>注意：测试代码需要把创建的类对象改成MRC才能打印到对应的数据 <code>-fno-objc-arc</code></p><h3 id="关于为什么block是copy来修饰，这涉及到block作用域的问题"><a href="#关于为什么block是copy来修饰，这涉及到block作用域的问题" class="headerlink" title="关于为什么block是copy来修饰，这涉及到block作用域的问题"></a>关于为什么block是copy来修饰，这涉及到block作用域的问题</h3><p>首先，block是一个对象，所以block理论上是可以retain/release的，但是block在创建的时候它的内存默认是分配在栈（stack）上，而不是堆（heap）上的。所以它的作用域仅限创建时候的当前上下文（函数，方法，…)，当你在该作用域外调用该block时，程序就会崩溃，所以为什么block需要使用copy来修饰，其实目的就是为了把它从内存的栈上挪动到内存的堆上，把其作用域扩大。</p><ul><li>官方文档：</li></ul><p><img src="/2020/03/03/block为什么要用copy/copy_block.png" alt="Alt text"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>block内部没有调用外部局部变量时存放在全局区（ARC和MRC下均是）</li><li>block使用了外部局部变量，这种情况下也是我们平时所常用的方式。MRC：block的内存地址显示在栈区，栈区的特点就是创建的对象随时可能被销毁，一旦被销毁后续再次调用空对象就可能会造成程序奔溃，在对block进行copy后，block存在堆区，所以在使用block属性时使用copy修饰，但是在ARC中的block都会在堆上，系统会默认对block进行copy操作</li><li>用copy，strong修饰block在ARC和MRC都是可以的，都是在堆区</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>一个block要使用self，会处理成在外部声明一个weak变量指向self，然而为何会出现在block里又声明一个strong变量指向weaSelf?<br>原因：block会把写在block里的变量copy一份，如果直接在block里使用self，（self对变量默认是强引用）self对block持有，导致循环引用，所以这里需要声明一个弱引用weakSelf，让block应用weakSelf，打破循环应用。<br>而这样会导致另外一个问题，因为weakSelf是对self的弱应用，如果这个时候控制器pop或者其他方式导致引用计数变为0，就会被释放，如果这个block是异步调用而且调用的时候self已经释放了，这个时候weakSelf已经变成了nil.<br>当控制器（也可以是其他对象）pop回来之后（或者一些其他的原因导致释放），网络请求完成，如果这个时候需要控制器做出反映，需要strongSelf再对weakSelf强引用一下。<br>但是，你可能会有疑问，strongSelf对weakSelf强引用，weakSelf对self弱引用，最终也不是对self进行了强引用，会导致循环引用，答案是不会的，因为strongSelf是在block里面声明的一个指针，当block执行完毕后，strongSelf会释放，这时候讲不再强引用weakSelf，所以self会正确释放。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>一般情况下你不需要自行调用copy或者retain一个block，只有当你需要在block定义域以外的地方使用时才需要copy，copy将block从内存栈区移到堆区。</li><li>其实block使用copy是MRC留下来的也算是一个传统吧，在MRC下，如上述，在方法中的block创建在栈区，使用copy就能把他放到堆区，这样在作用域外调用block程序就不会奔溃。</li><li>在ARC下，使用copy与strong其实都一样，因为block的retain就是用copy来实现的，所以block使用copy还能装装逼，所以自己是从MRC下走过来的。</li></ul>]]></content>
    
    <summary type="html">
    
      前段时间因为打算换工作，本来以为我已经复习好做好面试的准备了...
    
    </summary>
    
      <category term="iOS" scheme="https://CoderLawrence.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://CoderLawrence.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS10自定义推送UI和推送内容（上）</title>
    <link href="https://CoderLawrence.github.io/2018/08/06/iOS%E5%88%A9%E7%94%A8UserNotifications%E6%A1%86%E6%9E%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A8%E9%80%81UI%E5%92%8C%E6%8E%A8%E9%80%81%E5%86%85%E5%AE%B9/"/>
    <id>https://CoderLawrence.github.io/2018/08/06/iOS利用UserNotifications框架自定义推送UI和推送内容/</id>
    <published>2018-08-06T15:11:33.000Z</published>
    <updated>2020-03-21T12:09:02.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>iOS10这个系统已经出来一年多了，那时候系统刚发布的时候也做过iOS10推送的适配，但是那时候推送是集成第三方的，所以对新的系统的推送的升级不是很了解，UserNotifications.frameworks和UserNotificationUI.frameworks是在iOS10上发布的，可以认为是通知大改版，用于在新系统上替换久的通知框架，苹果给了我们一个能够自定义推送的一个机会，但是因为那是时候的工作没有涉及到这一块，只是对iOS10上的新通知框架有个初步的了解，并没有深入学习这两个新的推送框架，因为最近产品上有这样的需求，需要自定义推送的UI和统计推送的送达率等，所以对这两个框架进行了深入的学习，并且写篇文章总结一下，本篇文章最要是围绕着Notification Service Extension和Notification Content Extension来展开，有关iOS10系统的通知特性请看文章下面推荐的文章。</p><h3 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h3><p>在深入学习之前，如果大家没有看过iOS10推送相关的内容，这里推荐一篇文章供大家学习和了解一下iOS10推送相关的一些知识，本篇文章涉及的内容跟下面的文章会有所关联，当然会深入一些，学习嘛~需要循序渐进</p><ul><li><a href="https://www.jianshu.com/p/f5337e8f336d" target="_blank" rel="noopener">iOS开发 iOS10推送必看(基础篇)</a></li><li><a href="https://www.jianshu.com/p/bb89d636f989" target="_blank" rel="noopener">iOS开发 iOS10 推送通知 UserNotifications</a></li></ul><h3 id="自定义推送内容"><a href="#自定义推送内容" class="headerlink" title="自定义推送内容"></a>自定义推送内容</h3><p>在iOS 10以上版本的系统，苹果推送了Notification Service Extension（通知内容扩展）给我们自定义推送的内容</p><h4 id="1、Notification-Service-Extension简介"><a href="#1、Notification-Service-Extension简介" class="headerlink" title="1、Notification Service Extension简介"></a>1、Notification Service Extension简介</h4><p>Notification Service Extension是在iOS10推出后的一个新的通知特性，原理如下图（图片来源网络）：</p><p><img src="/2018/08/06/iOS利用UserNotifications框架自定义推送UI和推送内容/NotificationServiceExtension_2.png" alt="Alt text"></p><p>从图片我们可以看出，当手机接收到APNs推送给用户的消息后，中间添加了Service Extension这一个处理的步骤（当然也可以啥都不处理），通过这个扩展我们可以把我们要自定义的内容的处理放在这个步骤里面做，然后再呈现给用户，使得推送的内容更加丰富化，当然这里是有时间限制的（后面会详细讲）</p><h4 id="2、Notification-Service-Extension能做些什么事情"><a href="#2、Notification-Service-Extension能做些什么事情" class="headerlink" title="2、Notification Service Extension能做些什么事情"></a>2、Notification Service Extension能做些什么事情</h4><ul><li>统计推送送达率</li><li>自定义内容，推送内容丰富化</li><li>安全，可以防止推送内容被拦截和篡改</li></ul><h4 id="3、Notification-Service-Extension构建和使用"><a href="#3、Notification-Service-Extension构建和使用" class="headerlink" title="3、Notification Service Extension构建和使用"></a>3、Notification Service Extension构建和使用</h4><p>如果有使用过Extension的同学都知道，其实Extension在工程里面就是一个target，那么Noification Service Extension也不例外也是一个target：</p><p><img src="/2018/08/06/iOS利用UserNotifications框架自定义推送UI和推送内容/NotificationServiceExtension_3.png" alt="Alt text"></p><p>接着选择Notification Service Extension，如下图：</p><p><img src="/2018/08/06/iOS利用UserNotifications框架自定义推送UI和推送内容/NotificationServiceExtension_1.png" alt="Alt text"></p><p>完成后就会在主工程上看到对应的Notification Service Extension的target:</p><p><img src="/2018/08/06/iOS利用UserNotifications框架自定义推送UI和推送内容/NotificationServiceExtension_4.png" alt="Alt text"></p><p>在Notification Service Extension里面会看到有两个函数：</p><p><img src="/2018/08/06/iOS利用UserNotifications框架自定义推送UI和推送内容/NotificationServiceExtension_5.png" alt="Alt text"></p><p>通知的内容自定义在这个函数处理，可以处理附件的下载、推送内容修改、推送送达率的统计等:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceive</span><span class="params">(<span class="number">_</span> request: UNNotificationRequest, withContentHandler contentHandler: @escaping <span class="params">(UNNotificationContent)</span></span></span> -&gt; <span class="type">Void</span>)</span><br></pre></td></tr></table></figure><p>这个函数是当你接收到一条远程通知后，系统会调用override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -&gt; Void)这个函数给你处理通知的内容，当然系统也不会给很长的时间，长时间等待会造成体验不好什么的，系统只给你30秒的时间处理，如果处理不完会调用override func serviceExtensionTimeWillExpire()这个函数,如果你还不做出相应的操作，那么将显示最开始的通知的内容。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">serviceExtensionTimeWillExpire</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>例如推送统计送达率，推送送达率其实就是手机接收到通知后，系统调起了Notification Service Extension，那么这时候在接收到通知的回调里面，发送一个请求告诉服务端手机客户端已经接收到这条通知，以达到推送送达率统计的目的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceive</span><span class="params">(<span class="number">_</span> request: UNNotificationRequest, withContentHandler contentHandler: @escaping <span class="params">(UNNotificationContent)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.contentHandler = contentHandler</span><br><span class="line">        bestAttemptContent = (request.content.mutableCopy() <span class="keyword">as</span>? <span class="type">UNMutableNotificationContent</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//TODO 推送统计通达率</span></span><br><span class="line">        <span class="keyword">let</span> url: <span class="type">URL</span> = <span class="type">URL</span>.<span class="keyword">init</span>(string: <span class="string">"your https address"</span>)!</span><br><span class="line">        <span class="keyword">let</span> urlRequest: <span class="type">URLRequest</span> = <span class="type">URLRequest</span>.<span class="keyword">init</span>(url: url)</span><br><span class="line">        <span class="keyword">let</span> urlSession: <span class="type">URLSession</span> = <span class="type">URLSession</span>.<span class="keyword">init</span>(configuration: <span class="type">URLSessionConfiguration</span>.<span class="keyword">default</span>)</span><br><span class="line">        <span class="keyword">let</span> task: <span class="type">URLSessionDataTask</span> = urlSession.dataTask(with: urlRequest) &#123; (data, res, error) <span class="keyword">in</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//统计完了回调通知</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> bestAttemptContent = <span class="keyword">self</span>.bestAttemptContent &#123;</span><br><span class="line">                bestAttemptContent.title = <span class="string">"\(bestAttemptContent.title) [modified]"</span></span><br><span class="line">                contentHandler(bestAttemptContent)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        task.resume()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>例如内容自定义：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceive</span><span class="params">(<span class="number">_</span> request: UNNotificationRequest, withContentHandler contentHandler: @escaping <span class="params">(UNNotificationContent)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.contentHandler = contentHandler</span><br><span class="line">        bestAttemptContent = (request.content.mutableCopy() <span class="keyword">as</span>? <span class="type">UNMutableNotificationContent</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> 修改推送的标题和内容等</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> bestAttemptContent = <span class="keyword">self</span>.bestAttemptContent &#123;</span><br><span class="line">            bestAttemptContent.title = <span class="string">"这是我自定义推送的标题！！！🐶🐶"</span></span><br><span class="line">            bestAttemptContent.body = <span class="string">"这是我自定义推送的内容！！！🍎🍐"</span></span><br><span class="line">            contentHandler(bestAttemptContent)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4、Notification-Service-Extension配置"><a href="#4、Notification-Service-Extension配置" class="headerlink" title="4、Notification Service Extension配置"></a>4、Notification Service Extension配置</h4><p>前面说到Extension是一个target，那么就会涉及到打包相关的工作，这里需要配置对应的bundle identifier和打包的描述文件：</p><p><img src="/2018/08/06/iOS利用UserNotifications框架自定义推送UI和推送内容/NotificationServiceExtension_6.png" alt="Alt text"></p><p>推送环境的配置和勾选，需要开启push Notifications配置：</p><p><img src="/2018/08/06/iOS利用UserNotifications框架自定义推送UI和推送内容/NotificationServiceExtension_7.png" alt="Alt text"></p><p>假如你需要在网络上下载一些资源或者是一些数据请求，那么需要配置info.plist文件允许网络访问权限（如果不配置会导致程序奔溃）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAllowsArbitraryLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关于调试"><a href="#关于调试" class="headerlink" title="关于调试"></a>关于调试</h3><p>对于Notification Service Extension的调试，我在开发的过程中遇到了不少的问题，也花了不少的时间去查资料等，国内这一块的资料比较少而且也不全面，所以这里补充一下我遇到的问题和才到的坑</p><ul><li><p>程序编译了，当接收到通知的时候代码没有起作用，其实是调试的方式不对，首先是要调试主工程，然后再调试Notifcation Service Extension，再回到主工程调试Notification Service Extension的代码就会执行，你修改的内容就会在通知上看到</p></li><li><p>关于debug断点，是要在主工程的调试的时候去监听Notification Service Extension 才能断点，不能直接在Notification Service Extension调试的时候去断点调试，如果在这里调试可以在macOS的控制台App中看到Notification Service Extension启动后被系统kill了</p></li><li><p>关于前面连个步骤都不能起效果，是因为你的APNs推送的数据个数不对，需要加上<code>mutable-content</code>字段</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"aps"</span>: &#123;</span><br><span class="line">        <span class="attr">"alert"</span>: &#123;</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"推送测试"</span>,</span><br><span class="line">            <span class="attr">"body"</span>: <span class="string">"推送内容"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"badge"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"sound"</span>: <span class="string">"default"</span>,</span><br><span class="line">        <span class="attr">"mutable-content"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"category"</span>: <span class="string">"customUI"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="推送调试工具"><a href="#推送调试工具" class="headerlink" title="推送调试工具"></a>推送调试工具</h3><p>这里安利大家两个能够不需要服务器配置也能够测试的小工具</p><ul><li><a href="https://github.com/shaojiankui/SmartPush" target="_blank" rel="noopener">SmartPush</a></li><li>Easy APNs Provider，App Store可以下载</li></ul>]]></content>
    
    <summary type="html">
    
      iOS利用Notification Service Extension和Notification Content Extension自定义推送内容和UI
    
    </summary>
    
      <category term="iOS" scheme="https://CoderLawrence.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://CoderLawrence.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Android开发环境搭建</title>
    <link href="https://CoderLawrence.github.io/2018/05/24/Android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://CoderLawrence.github.io/2018/05/24/Android开发环境搭建/</id>
    <published>2018-05-24T03:22:01.000Z</published>
    <updated>2018-06-22T03:20:31.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一名iOS攻城狮，因为工作需要除了iOS开发之外，想要拓展一下移动端开发的知识，所以想要窥探一下Android开发的一下知识，了解一下Android一门技术的设计语言和规范等，Android这一门技术还是在大学的时候接触过，应该变化很大了，于是趁着工作之余搭建一下Android开发的集成环境，作为一名Android开发的门外汉觉得还是有必要总结一下Android开发的环境的搭建的。</p><h3 id="Java环境配置"><a href="#Java环境配置" class="headerlink" title="Java环境配置"></a>Java环境配置</h3><p>我本人使用的是macOS系统，这里以macOS为例讲解Java环境的配置</p><ul><li><p>JDK 下载</p><p>我这里使用的是 Java 8，据说Java 9 Android Studio支持还没有那么好 JDK下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Oracle官网</a></p></li><li><p>JDK 安装</p><p>下载完JDK后直接点击打开pkg安装包然后安装即可</p></li><li><p>JDK 环境变量配置</p><ul><li>如果你是第一次配置环境变量，可以代码终端然后输入<code>touch .bash_profile</code> 来创建一个.bash_profile的隐藏配置文件</li></ul><p><img src="/2018/05/24/Android开发环境搭建/1.png" alt="Alt text"></p><ul><li>如果你已经配置过环境变量那么在终端下使用如下指令打开.bash_profile文件<code>open -e .bash_profile</code></li></ul><p><img src="/2018/05/24/Android开发环境搭建/2.png" alt="Alt text"></p><ul><li><p>添加环境变量到.bash_profile文件保存即可</p><p><code>JAVA_HOME=&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home&quot;export JAVA_HOMECLASS_PATH=&quot;$JAVA_HOME/lib&quot;PATH=&quot;.$PATH:$JAVA_HOME/bin&quot;</code></p></li></ul></li><li><p>测试JDK是否配置成功</p><p>终端下输入如下指令: <code>java -version</code></p><p><img src="/2018/05/24/Android开发环境搭建/3.png" alt="Alt text"></p></li></ul><h3 id="Android-Sutdio-环境配置"><a href="#Android-Sutdio-环境配置" class="headerlink" title="Android Sutdio 环境配置"></a>Android Sutdio 环境配置</h3><ul><li><p>Android Sutdio 下载</p><ul><li><a href="http://www.android-studio.org/index.php/download" target="_blank" rel="noopener">IDE下载地址</a></li></ul></li><li><p>IDE 安装</p><ul><li>下载完安装包后安装IDE即可</li></ul></li><li><p>我现在下载Android Studio之后之前是要科学上网的，现在不需要科学上网了。</p></li><li><p>至此Android Studio开发环境相关配置已经配置完成，Android SDK版本相关的下载这里不再赘述，执行上网找Android Studio使用的相关教程。</p></li></ul>]]></content>
    
    <summary type="html">
    
      iOS开发的Android小白搭建Android开发环境之路。
    
    </summary>
    
      <category term="Android" scheme="https://CoderLawrence.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://CoderLawrence.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建个人博客</title>
    <link href="https://CoderLawrence.github.io/2018/05/22/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://CoderLawrence.github.io/2018/05/22/Hexo-Github搭建个人博客/</id>
    <published>2018-05-22T03:29:58.000Z</published>
    <updated>2018-05-22T08:43:59.229Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一开始接触写代码的时候我就想搭一个自己个人的技术博客，用来记录平常开发时遇到的问题和平时的一些学习等，但是那时候不知道要怎么去搭建属于自己的博客，而后工作越来越忙了这个事情就耽搁了，前段时间想逼自己记录一些自己平常时间的一些学习等，所以又萌发了重新搭建技术博客的念头，看了一波资料后决定采用Hexo+Github搭建个人博客, 因为Hexo搭建比较简单，而且Hexo使用Markdown渲染和解析文章，编写文章非常方便。</p><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p>Hexo 是一个快速、简介高效的博客框架。Hexo 官网地址：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><h4 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h4><p>相信很多程序员都是使用Git，所以这里不再赘述git的安装，不会使用的同学这里推荐一个<a href="https://git-scm.com/book/zh/v2/起步-安装-Git" target="_blank" rel="noopener">Git安装教程</a></p><ul><li>到你的Github账号上去建一个新的Repository，仓库名为[your_user_name.github.io]，没有Github账号的同学到这里去申请<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></li><li>后续想要把网址部署到Github上的同学，需要在【your_user_name.github.io】此仓库下的Setting配置里添加一个Deploy keys</li></ul><h4 id="创建-SSH-key可以参考："><a href="#创建-SSH-key可以参考：" class="headerlink" title="创建 SSH key可以参考："></a>创建 SSH key可以参考：</h4><ul><li><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="noopener">https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/</a></li></ul><h4 id="Homebrew安装"><a href="#Homebrew安装" class="headerlink" title="Homebrew安装"></a>Homebrew安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h4 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h4><h5 id="直接使用homebrew安装"><a href="#直接使用homebrew安装" class="headerlink" title="直接使用homebrew安装"></a>直接使用homebrew安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure><h5 id="下载Node-js包安装"><a href="#下载Node-js包安装" class="headerlink" title="下载Node.js包安装"></a>下载Node.js包安装</h5><p>Node.js下载地址<a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org/</a></p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>安装完成Hexo后，建立一个<code>Blog</code>文件夹，执行如下指令即可完成Hexo初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd Blog</span><br><span class="line">$ Hexo init</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>完成Hexo初始化后，就可以测试一下你的博客是否搭建成功，执行如下指令进行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd Blog</span><br><span class="line">$ Hexo post &quot;我的一个博客&quot;</span><br><span class="line">$ Hexo g</span><br><span class="line">$ Hexo server</span><br></pre></td></tr></table></figure><p>执行如下指令后浏览器输入:<code>http://localhost:4000</code>查看本地博客是否可以访问</p><h3 id="发布博客到Github"><a href="#发布博客到Github" class="headerlink" title="发布博客到Github"></a>发布博客到Github</h3><p>完成了博客的初始化后，我们可以把我们搭建的博客发布到Github，打开<code>Blog</code>文件夹下的<code>_config.yml</code>文件，找到<code>deploy</code>，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/your_user_name/you_user_name.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>要提交到Github上需要安装hexo-deployer-git插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>等待hexo-deployer-git插件安装完成后，执行如下指令，即可完成Hexo发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ Hexo clean</span><br><span class="line">$ Hexo g</span><br><span class="line">$ Hexo d</span><br></pre></td></tr></table></figure><p>到了这一步后耐心等待，如果遇到要输入Github账号用户名和密码，输入即可发布完成。</p><h3 id="修改Hexo默认主题"><a href="#修改Hexo默认主题" class="headerlink" title="修改Hexo默认主题"></a>修改Hexo默认主题</h3><p>我这里的博客主题是使用了<code>next</code>主题，需要自定义主题的可以到以下地址查看教程修改: </p><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a><br><a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><h3 id="Hexo-写文章"><a href="#Hexo-写文章" class="headerlink" title="Hexo 写文章"></a>Hexo 写文章</h3><p>博客搭建完成后，可以开心的记录你的学习啊，个人心得什么的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd Blog</span><br><span class="line">$ Hexo new post &quot;xxxxxxx&quot;</span><br></pre></td></tr></table></figure><p>完成文章编写后，可以重新发布到Github，指令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ Hexo clean</span><br><span class="line">$ Hexo g</span><br><span class="line">$ Hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Hexo+Github搭建属于自己的个人博客，从此不再羡慕别人。
    
    </summary>
    
      <category term="Hexo教程" scheme="https://CoderLawrence.github.io/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://CoderLawrence.github.io/tags/Hexo/"/>
    
      <category term="web" scheme="https://CoderLawrence.github.io/tags/web/"/>
    
  </entry>
  
</feed>
